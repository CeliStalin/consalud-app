-- ============================================================================
-- QUERIES ÚTILES - SISTEMA DE ENVÍO DE CORREOS AFIL
-- ============================================================================
-- Base de Datos: Oracle 11g+
-- Esquema: AFIL
-- Propósito: Consultas para análisis, reportes y monitoreo
-- ============================================================================

-- ============================================================================
-- 1. DASHBOARD - MÉTRICAS GENERALES
-- ============================================================================

-- Vista consolidada de rendimiento por proceso
CREATE OR REPLACE VIEW VW_METRICAS_PROCESO AS
SELECT 
    cp.ID_PROCESO,
    cp.PERIODO,
    pt.NEGOCIO,
    pt.TIPO_PROCESO,
    em.DESCRIPCION as ESTADO_PROCESO,
    COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) as TOTAL_ENVIADOS,
    COUNT(DISTINCT ne.ID_SEQ_PROCESO_DET) as TOTAL_NO_ENVIADOS,
    ROUND(
        COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) * 100.0 / 
        NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) + COUNT(DISTINCT ne.ID_SEQ_PROCESO_DET), 0)
    , 2) as TASA_ENTREGA_PCT,
    SUM(NVL(pe.E_SENTS, 0)) as TOTAL_ENVIOS_ACUMULADOS,
    SUM(NVL(pe.E_OPENS, 0)) as TOTAL_APERTURAS,
    SUM(NVL(pe.E_CLICKS, 0)) as TOTAL_CLICKS,
    SUM(NVL(pe.E_ACEPTEDS, 0)) as TOTAL_ACEPTADOS,
    AVG(NVL(pe.E_RETRY, 0)) as PROMEDIO_REINTENTOS,
    ROUND(
        SUM(NVL(pe.E_OPENS, 0)) * 100.0 / 
        NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET), 0)
    , 2) as TASA_APERTURA_PCT,
    ROUND(
        SUM(NVL(pe.E_CLICKS, 0)) * 100.0 / 
        NULLIF(SUM(NVL(pe.E_OPENS, 0)), 0)
    , 2) as TASA_CLICK_PCT,
    cp.FECHA_CREACION_REG as FECHA_PROCESO
FROM AFIL.AFIL_ENV_CONF_PROCESO cp
INNER JOIN AFIL.AFIL_ENV_PLANTILLAS pt 
    ON cp.ID_PLANTILLA = pt.ID_PLANTILLA
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_MAESTRO em 
    ON cp.ID_ESTADO = em.ID_ESTADO
LEFT JOIN AFIL.AFIL_ENV_PROCESO_ENVIADOS pe 
    ON cp.ID_PROCESO = pe.ID_PROCESO AND pe.ESTADO_REG = 'V'
LEFT JOIN AFIL.AFIL_ENV_NO_ENVIADOS ne 
    ON cp.ID_PROCESO = ne.ID_PROCESO AND ne.ESTADO_REG = 'V'
WHERE cp.ESTADO_REG = 'V'
GROUP BY 
    cp.ID_PROCESO, cp.PERIODO, pt.NEGOCIO, pt.TIPO_PROCESO, 
    em.DESCRIPCION, cp.FECHA_CREACION_REG;

-- ============================================================================
-- 2. ANÁLISIS DE ERRORES
-- ============================================================================

-- Top 10 errores de no envío
SELECT 
    er.ESTADO_RECEPCION_MAIL,
    er.DESCRIPCION as ERROR_DESCRIPCION,
    COUNT(*) as CANTIDAD_FALLOS,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as PORCENTAJE,
    MIN(ne.FECHA_CREACION_REG) as PRIMER_OCURRENCIA,
    MAX(ne.FECHA_CREACION_REG) as ULTIMA_OCURRENCIA
FROM AFIL.AFIL_ENV_NO_ENVIADOS ne
INNER JOIN AFIL.AFIL_ENV_ESTADOS_RECEPCION er 
    ON ne.ESTADO_RECEPCION_MAIL = er.ESTADO_RECEPCION_MAIL
WHERE ne.ESTADO_REG = 'V'
  AND ne.FECHA_CREACION_REG >= ADD_MONTHS(SYSDATE, -3) -- Últimos 3 meses
GROUP BY er.ESTADO_RECEPCION_MAIL, er.DESCRIPCION
ORDER BY CANTIDAD_FALLOS DESC
FETCH FIRST 10 ROWS ONLY;

-- Detalle de destinatarios con múltiples fallos
SELECT 
    ne.RUT,
    ne.DV,
    ne.NOMBRE || ' ' || ne.AP_PATERNO || ' ' || ne.AP_MATERNO as NOMBRE_COMPLETO,
    ne.CORREO,
    COUNT(DISTINCT ne.ID_PROCESO) as PROCESOS_FALLIDOS,
    LISTAGG(er.DESCRIPCION, '; ') WITHIN GROUP (ORDER BY ne.FECHA_CREACION_REG) as MOTIVOS,
    MIN(ne.FECHA_CREACION_REG) as PRIMER_FALLO,
    MAX(ne.FECHA_CREACION_REG) as ULTIMO_FALLO
FROM AFIL.AFIL_ENV_NO_ENVIADOS ne
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_RECEPCION er 
    ON ne.ESTADO_RECEPCION_MAIL = er.ESTADO_RECEPCION_MAIL
WHERE ne.ESTADO_REG = 'V'
  AND ne.FECHA_CREACION_REG >= ADD_MONTHS(SYSDATE, -6)
GROUP BY ne.RUT, ne.DV, ne.NOMBRE, ne.AP_PATERNO, ne.AP_MATERNO, ne.CORREO
HAVING COUNT(DISTINCT ne.ID_PROCESO) >= 3
ORDER BY PROCESOS_FALLIDOS DESC;

-- ============================================================================
-- 3. ANÁLISIS DE ENGAGEMENT
-- ============================================================================

-- Ranking de plantillas por efectividad
SELECT 
    pt.ID_PLANTILLA,
    pt.NEGOCIO,
    pt.TIPO_PROCESO,
    COUNT(DISTINCT cp.ID_PROCESO) as VECES_UTILIZADA,
    COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) as TOTAL_DESTINATARIOS,
    SUM(pe.E_OPENS) as TOTAL_APERTURAS,
    SUM(pe.E_CLICKS) as TOTAL_CLICKS,
    ROUND(SUM(pe.E_OPENS) * 100.0 / NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET), 0), 2) as TASA_APERTURA,
    ROUND(SUM(pe.E_CLICKS) * 100.0 / NULLIF(SUM(pe.E_OPENS), 0), 2) as TASA_CLICK,
    ROUND(
        (SUM(pe.E_OPENS) * 0.5 + SUM(pe.E_CLICKS) * 0.5) / NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET), 0) * 100
    , 2) as SCORE_ENGAGEMENT
FROM AFIL.AFIL_ENV_PLANTILLAS pt
INNER JOIN AFIL.AFIL_ENV_CONF_PROCESO cp 
    ON pt.ID_PLANTILLA = cp.ID_PLANTILLA
INNER JOIN AFIL.AFIL_ENV_PROCESO_ENVIADOS pe 
    ON cp.ID_PROCESO = pe.ID_PROCESO
WHERE pt.ESTADO_REG = 'V'
  AND cp.ESTADO_REG = 'V'
  AND pe.ESTADO_REG = 'V'
  AND pe.FECHA_ENVIO >= ADD_MONTHS(SYSDATE, -12)
GROUP BY pt.ID_PLANTILLA, pt.NEGOCIO, pt.TIPO_PROCESO
ORDER BY SCORE_ENGAGEMENT DESC;

-- Análisis temporal de apertura (tiempo entre envío y apertura)
SELECT 
    TRUNC((pe.FECHA_APERTURA - pe.FECHA_ENVIO) * 24) as HORAS_HASTA_APERTURA,
    COUNT(*) as CANTIDAD_APERTURAS,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as PORCENTAJE_ACUMULADO
FROM AFIL.AFIL_ENV_PROCESO_ENVIADOS pe
WHERE pe.ESTADO_REG = 'V'
  AND pe.FECHA_APERTURA IS NOT NULL
  AND pe.FECHA_ENVIO IS NOT NULL
  AND pe.E_OPENS > 0
  AND pe.FECHA_ENVIO >= ADD_MONTHS(SYSDATE, -6)
GROUP BY TRUNC((pe.FECHA_APERTURA - pe.FECHA_ENVIO) * 24)
HAVING TRUNC((pe.FECHA_APERTURA - pe.FECHA_ENVIO) * 24) BETWEEN 0 AND 168 -- 1 semana
ORDER BY HORAS_HASTA_APERTURA;

-- ============================================================================
-- 4. MONITOREO DE PROCESOS
-- ============================================================================

-- Procesos en ejecución o pendientes
SELECT 
    cp.ID_PROCESO,
    cp.PERIODO,
    pt.TIPO_PROCESO,
    em.DESCRIPCION as ESTADO,
    cp.FECHA_CREACION_REG as FECHA_INICIO,
    ROUND((SYSDATE - cp.FECHA_CREACION_REG) * 24, 2) as HORAS_TRANSCURRIDAS,
    COUNT(pe.ID_SEQ_PROCESO_DET) as ENVIADOS_HASTA_AHORA,
    COUNT(ne.ID_SEQ_PROCESO_DET) as FALLOS_HASTA_AHORA
FROM AFIL.AFIL_ENV_CONF_PROCESO cp
INNER JOIN AFIL.AFIL_ENV_PLANTILLAS pt 
    ON cp.ID_PLANTILLA = pt.ID_PLANTILLA
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_MAESTRO em 
    ON cp.ID_ESTADO = em.ID_ESTADO
LEFT JOIN AFIL.AFIL_ENV_PROCESO_ENVIADOS pe 
    ON cp.ID_PROCESO = pe.ID_PROCESO AND pe.ESTADO_REG = 'V'
LEFT JOIN AFIL.AFIL_ENV_NO_ENVIADOS ne 
    ON cp.ID_PROCESO = ne.ID_PROCESO AND ne.ESTADO_REG = 'V'
WHERE cp.ESTADO_REG = 'V'
  AND cp.ID_ESTADO NOT IN (SELECT ID_ESTADO 
                            FROM AFIL.AFIL_ENV_ESTADOS_MAESTRO 
                            WHERE UPPER(DESCRIPCION) LIKE '%FINALIZADO%' 
                               OR UPPER(DESCRIPCION) LIKE '%COMPLETADO%')
  AND cp.FECHA_CREACION_REG >= SYSDATE - 7 -- Última semana
GROUP BY cp.ID_PROCESO, cp.PERIODO, pt.TIPO_PROCESO, em.DESCRIPCION, cp.FECHA_CREACION_REG
ORDER BY cp.FECHA_CREACION_REG DESC;

-- Progreso por bloques de un proceso específico
SELECT 
    NUM_BLOQUE,
    COUNT(*) as REGISTROS_PROCESADOS,
    MIN(FECHA_ENVIO) as INICIO_BLOQUE,
    MAX(FECHA_ENVIO) as FIN_BLOQUE,
    ROUND(AVG(E_RETRY), 2) as PROMEDIO_REINTENTOS
FROM AFIL.AFIL_ENV_PROCESO_ENVIADOS
WHERE ID_PROCESO = :P_ID_PROCESO
  AND ESTADO_REG = 'V'
GROUP BY NUM_BLOQUE
ORDER BY NUM_BLOQUE;

-- ============================================================================
-- 5. AUDITORÍA Y TRAZABILIDAD
-- ============================================================================

-- Historial de cambios en plantillas
SELECT 
    ID_PLANTILLA,
    TIPO_PROCESO,
    USUARIO_CREACION,
    FECHA_CREACION_REG,
    USUARIO_MODIFICACION,
    FECHA_MODIFICACION,
    FUNCION_MODIFICACION,
    CASE ESTADO_REG 
        WHEN 'V' THEN 'VIGENTE'
        WHEN 'E' THEN 'ELIMINADO'
    END as ESTADO,
    FECHA_ESTADO_REG
FROM AFIL.AFIL_ENV_PLANTILLAS
WHERE ID_PLANTILLA = :P_ID_PLANTILLA
ORDER BY NVL(FECHA_MODIFICACION, FECHA_CREACION_REG) DESC;

-- Rastro completo de un envío específico por RUT
SELECT 
    'ENVIADO' as TIPO_REGISTRO,
    pe.ID_PROCESO,
    cp.PERIODO,
    pt.TIPO_PROCESO,
    pe.CORREOS as EMAIL,
    pe.FECHA_ENVIO,
    pe.FECHA_APERTURA,
    pe.E_OPENS as APERTURAS,
    pe.E_CLICKS as CLICKS,
    em.DESCRIPCION as ESTADO,
    pe.ID_MAIL,
    pe.ID_CONTENT_EML,
    SUBSTR(pe.RESPUESTA, 1, 200) as RESPUESTA_RESUMIDA
FROM AFIL.AFIL_ENV_PROCESO_ENVIADOS pe
INNER JOIN AFIL.AFIL_ENV_CONF_PROCESO cp ON pe.ID_PROCESO = cp.ID_PROCESO
INNER JOIN AFIL.AFIL_ENV_PLANTILLAS pt ON cp.ID_PLANTILLA = pt.ID_PLANTILLA
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_MAESTRO em ON pe.ID_ESTADO = em.ID_ESTADO
WHERE pe.RUT = :P_RUT
  AND pe.ESTADO_REG = 'V'
UNION ALL
SELECT 
    'NO ENVIADO' as TIPO_REGISTRO,
    ne.ID_PROCESO,
    cp.PERIODO,
    pt.TIPO_PROCESO,
    ne.CORREO as EMAIL,
    ne.FECHA_CREACION_REG as FECHA_ENVIO,
    NULL as FECHA_APERTURA,
    NULL as APERTURAS,
    NULL as CLICKS,
    em.DESCRIPCION as ESTADO,
    NULL as ID_MAIL,
    NULL as ID_CONTENT_EML,
    er.DESCRIPCION || ' - ' || ne.MOTIVO as RESPUESTA_RESUMIDA
FROM AFIL.AFIL_ENV_NO_ENVIADOS ne
INNER JOIN AFIL.AFIL_ENV_CONF_PROCESO cp ON ne.ID_PROCESO = cp.ID_PROCESO
INNER JOIN AFIL.AFIL_ENV_PLANTILLAS pt ON cp.ID_PLANTILLA = pt.ID_PLANTILLA
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_MAESTRO em ON ne.ID_ESTADO = em.ID_ESTADO
LEFT JOIN AFIL.AFIL_ENV_ESTADOS_RECEPCION er ON ne.ESTADO_RECEPCION_MAIL = er.ESTADO_RECEPCION_MAIL
WHERE ne.RUT = :P_RUT
  AND ne.ESTADO_REG = 'V'
ORDER BY FECHA_ENVIO DESC;

-- ============================================================================
-- 6. MANTENIMIENTO Y OPTIMIZACIÓN
-- ============================================================================

-- Identificar tablas que requieren mantenimiento (fragmentación)
SELECT 
    segment_name,
    ROUND(bytes/1024/1024, 2) as SIZE_MB,
    blocks,
    extents
FROM dba_segments
WHERE segment_name IN (
    'AFIL_ENV_PROCESO_ENVIADOS',
    'AFIL_ENV_NO_ENVIADOS'
)
AND owner = 'AFIL'
ORDER BY bytes DESC;

-- Registros elegibles para archivado (más de 2 años)
SELECT 
    'AFIL_ENV_PROCESO_ENVIADOS' as TABLA,
    COUNT(*) as REGISTROS_ARCHIVABLES,
    ROUND(SUM(DBMS_LOB.GETLENGTH(RESPUESTA))/1024/1024, 2) as SIZE_CLOB_MB
FROM AFIL.AFIL_ENV_PROCESO_ENVIADOS
WHERE FECHA_ENVIO < ADD_MONTHS(SYSDATE, -24)
  AND ESTADO_REG = 'V'
UNION ALL
SELECT 
    'AFIL_ENV_NO_ENVIADOS' as TABLA,
    COUNT(*) as REGISTROS_ARCHIVABLES,
    0 as SIZE_CLOB_MB
FROM AFIL.AFIL_ENV_NO_ENVIADOS
WHERE FECHA_CREACION_REG < ADD_MONTHS(SYSDATE, -24)
  AND ESTADO_REG = 'V';

-- ============================================================================
-- 7. REPORTES EJECUTIVOS
-- ============================================================================

-- Resumen mensual de actividad
SELECT 
    TO_CHAR(pe.FECHA_ENVIO, 'YYYY-MM') as PERIODO_MES,
    COUNT(DISTINCT pe.ID_PROCESO) as PROCESOS_EJECUTADOS,
    COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) as TOTAL_ENVIOS,
    SUM(pe.E_OPENS) as TOTAL_APERTURAS,
    ROUND(SUM(pe.E_OPENS) * 100.0 / COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET), 2) as TASA_APERTURA,
    SUM(pe.E_CLICKS) as TOTAL_CLICKS,
    ROUND(SUM(pe.E_CLICKS) * 100.0 / NULLIF(SUM(pe.E_OPENS), 0), 2) as TASA_CLICK
FROM AFIL.AFIL_ENV_PROCESO_ENVIADOS pe
WHERE pe.ESTADO_REG = 'V'
  AND pe.FECHA_ENVIO >= ADD_MONTHS(TRUNC(SYSDATE, 'MM'), -12)
GROUP BY TO_CHAR(pe.FECHA_ENVIO, 'YYYY-MM')
ORDER BY PERIODO_MES DESC;

-- Comparativo por tipo de negocio
SELECT 
    pt.NEGOCIO,
    COUNT(DISTINCT cp.ID_PROCESO) as PROCESOS,
    COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) as ENVIOS_EXITOSOS,
    COUNT(DISTINCT ne.ID_SEQ_PROCESO_DET) as ENVIOS_FALLIDOS,
    ROUND(
        COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) * 100.0 / 
        NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET) + COUNT(DISTINCT ne.ID_SEQ_PROCESO_DET), 0)
    , 2) as TASA_EXITO,
    SUM(NVL(pe.E_OPENS, 0)) as APERTURAS,
    ROUND(
        SUM(NVL(pe.E_OPENS, 0)) * 100.0 / NULLIF(COUNT(DISTINCT pe.ID_SEQ_PROCESO_DET), 0)
    , 2) as TASA_APERTURA
FROM AFIL.AFIL_ENV_PLANTILLAS pt
INNER JOIN AFIL.AFIL_ENV_CONF_PROCESO cp ON pt.ID_PLANTILLA = cp.ID_PLANTILLA
LEFT JOIN AFIL.AFIL_ENV_PROCESO_ENVIADOS pe 
    ON cp.ID_PROCESO = pe.ID_PROCESO AND pe.ESTADO_REG = 'V'
LEFT JOIN AFIL.AFIL_ENV_NO_ENVIADOS ne 
    ON cp.ID_PROCESO = ne.ID_PROCESO AND ne.ESTADO_REG = 'V'
WHERE pt.ESTADO_REG = 'V'
  AND cp.ESTADO_REG = 'V'
  AND cp.FECHA_CREACION_REG >= ADD_MONTHS(SYSDATE, -6)
GROUP BY pt.NEGOCIO
ORDER BY ENVIOS_EXITOSOS DESC;

-- ============================================================================
-- 8. ÍNDICES RECOMENDADOS
-- ============================================================================

/*
-- Performance: Índices sugeridos para optimizar queries frecuentes

CREATE INDEX IDX_PROC_ENV_FECHA_RUT 
    ON AFIL.AFIL_ENV_PROCESO_ENVIADOS(FECHA_ENVIO, RUT) 
    TABLESPACE AFIL_MIDX01;

CREATE INDEX IDX_PROC_ENV_ID_PROCESO 
    ON AFIL.AFIL_ENV_PROCESO_ENVIADOS(ID_PROCESO, ESTADO_REG) 
    TABLESPACE AFIL_MIDX01;

CREATE INDEX IDX_NO_ENV_FECHA_ESTADO 
    ON AFIL.AFIL_ENV_NO_ENVIADOS(FECHA_CREACION_REG, ESTADO_RECEPCION_MAIL) 
    TABLESPACE AFIL_MIDX01;

CREATE INDEX IDX_CONF_PROC_PERIODO 
    ON AFIL.AFIL_ENV_CONF_PROCESO(PERIODO, ID_ESTADO) 
    TABLESPACE AFIL_MIDX01;

-- Índice de texto para búsqueda en respuestas (requiere Oracle Text)
CREATE INDEX IDX_PROC_ENV_RESPUESTA_TEXT 
    ON AFIL.AFIL_ENV_PROCESO_ENVIADOS(RESPUESTA) 
    INDEXTYPE IS CTXSYS.CONTEXT;
*/

-- ============================================================================
-- FIN DEL SCRIPT
-- ============================================================================