variables:
  - name: BuildParameters.RestoreBuildProjects
    value: "**/*.csproj"
  - name: BuildParameters.TestProjects
    value: "**/*[Tt]ests/*.csproj"
  - name: Aprobadores
    value: '[Consalud]\CS_Pandora'
  - name: Explotacion
    value: '[Consalud]\CS_Explotacion'
name: $(date:yyyyMMdd)$(rev:.r)
stages:
  # - stage: SonarQube
  #   displayName: "SonarQube"
  #   jobs:
  #     - job: Job_0
  #       displayName: Análisis de Código Estático
  #       pool:
  #         name: Default
  #       steps:
  #         - checkout: self
  #           clean: False
  #         - task: SonarQubePrepare@5
  #           displayName: Preparar Análisis en SonarQube
  #           inputs:
  #             SonarQube: "SonarQube-SolicitudesClientes"
  #             projectKey: "$(Build.Repository.ID)"
  #             projectName: "$(System.TeamProject)-$(Build.Repository.Name)"
  #             projectVersion: "$(Build.BuildNumber)"
  #             extraProperties: "sonar.cs.vscoveragexml.reportsPaths=$(Agent.TempDirectory)/**/*.coveragexml"
  #         - task: PowerShell@2
  #           displayName: Engañando a SQ
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'

  #               Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"
  #         - task: DotNetCoreCLI@2
  #           displayName: dotnet restore
  #           inputs:
  #             command: "restore"
  #             projects: $(BuildParameters.RestoreBuildProjects)
  #             feedsToUse: "select"
  #             vstsFeed: "88c5667f-ba35-4a8a-8a4f-323f7520e2d8"
  #             noCache: true
  #         - task: DotNetCoreCLI@2
  #           displayName: dotnet build
  #           inputs:
  #             command: "build"
  #             projects: $(BuildParameters.RestoreBuildProjects)
  #             arguments: "--configuration Debug"
  #         - task: DotNetCoreCLI@2
  #           displayName: dotnet test
  #           inputs:
  #             command: "test"
  #             projects: $(BuildParameters.TestProjects)
  #             arguments: '--collect "Code coverage"'
  #         - task: PowerShell@2
  #           displayName: Fix Cobertura SQ
  #           inputs:
  #             targetType: inline
  #             script: >-
  #               $ver = (Get-ChildItem $env:USERPROFILE\.nuget\packages\Microsoft.CodeCoverage | Select-Object -Property Name | Sort-Object -Descending | Select-Object -First 1).Name

  #               $netstd = (Get-ChildItem $env:USERPROFILE\.nuget\packages\Microsoft.CodeCoverage\$ver\build\ | Select-Object -Property Name | Sort-Object -Descending | Select-Object -First 1).Name

  #               Get-ChildItem -Recurse -Filter "*.coverage" | % {

  #               $outfile = "$([System.IO.Path]::GetFileNameWithoutExtension($_.FullName)).coveragexml"

  #               $output = [System.IO.Path]::Combine([System.IO.Path]::GetDirectoryName($_.FullName), $outfile)

  #               "Analyse '$($_.FullName)' with output '$output'..."

  #               . $env:USERPROFILE\.nuget\packages\microsoft.codecoverage\$ver\build\$netstd\CodeCoverage\CodeCoverage.exe analyze /output:$output $_.FullName

  #               }
  #             workingDirectory: $(Agent.TempDirectory)
  #         - task: SonarQubeAnalyze@5
  #           displayName: Ejecutar Análisis de Código
  #         - task: SonarQubePublish@5
  #           displayName: Publicar Resultado de SQ
  #           condition: succeededOrFailed()
  #     - job: Aprobacion
  #       dependsOn: Job_0
  #       condition: succeededOrFailed()
  #       displayName: Esperando por aprobaciones
  #       pool: server
  #       timeoutInMinutes: 4320
  #       steps:
  #         - task: ManualValidation@0
  #           timeoutInMinutes: 1440
  #           inputs:
  #             notifyUsers: |
  #               $(Aprobadores)

  #               angelo.bernardi@consalud.cl
  #             instructions: "Su aprobación porfa para SQ"
  #             onTimeout: "reject"
  - stage: BuildDev
    displayName: "Build Desarrollo"
    jobs:
      - job: Job_1
        displayName: Agent job 1
        pool:
          name: DockerAgents
        variables:
          - group: ReleaseClusterDev
        steps:
          - checkout: self
            clean: False
          - task: Docker@0
            displayName: Build an image (dev)
            inputs:
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: "azure-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              dockerFile: Dockerfile
              buildArguments: >-
                AMBIENTE=$(ambiente)

                MODE=development
              defaultContext: false
              context: .
              includeLatestTag: true
          - task: Docker@0
            displayName: Push an image
            inputs:
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: "azure-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              azureSubscriptionEndpoint: "Azure Vault-SolicitudesClientes"
              action: Push an image
              includeLatestTag: true
          - task: replacetokens@4
            displayName: Replace tokens
            inputs:
              rootDirectory: ./
              targetFiles: >-
                deployment.yaml

                Ingress.yaml

                service.yaml
              tokenPattern: azpipelines
              tokenPrefix: ""
              tokenSuffix: ""
              writeBOM: false
              verbosity: detailed
              actionOnMissing: fail
              actionOnNoFiles: fail
          - task: KubectlInstaller@0
            displayName: Instalar Kubectl latest
          - task: KubernetesManifest@0
            displayName: deploy Api
            inputs:
              kubernetesServiceConnection: "rke_des-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              namespace: default
              manifests: deployment.yaml
          - task: Kubernetes@1
            displayName: kubectl rollout
            inputs:
              kubernetesServiceEndpoint: "rke_des-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              namespace: default
              command: rollout
              arguments: restart deployment app-gestor-solicitudes
          - task: KubernetesManifest@0
            displayName: deploy Servicio
            inputs:
              kubernetesServiceConnection: "rke_des-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              namespace: default
              manifests: service.yaml
          - task: KubernetesManifest@0
            displayName: deploy Ingress
            inputs:
              kubernetesServiceConnection: "rke_des-Utilitarios-Transversales-PlantillaReact-SolicitudesClientes"
              namespace: default
              manifests: Ingress.yaml
      - job: Aprobacion
        dependsOn: Job_1
        condition: succeeded()
        displayName: Esperando por aprobaciones
        pool: server
        timeoutInMinutes: 4320
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440
            inputs:
              notifyUsers: |
                $(Aprobadores)

                angelo.bernardi@consalud.cl
              instructions: "Su aprobación porfa para DES"
              onTimeout: "resume"
  - stage: BuildTes
    displayName: "Build Testing"
    jobs:
      - job: Job_2
        displayName: Agent job 1
        pool:
          name: DockerAgents
        variables:
          - group: ReleaseClusterTes
        steps:
          - checkout: self
            clean: False
          - task: Docker@0
            displayName: Build an image (dev)
            inputs:
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: "RegistryProdCSLD-SolicitudesClientes"
              dockerFile: Dockerfile
              buildArguments: >-
                AMBIENTE=$(ambiente)

                MODE=test
              defaultContext: false
              context: .
              includeLatestTag: true
          - task: Docker@0
            displayName: Push an image
            inputs:
              containerregistrytype: Container Registry
              dockerRegistryEndpoint: "RegistryProdCSLD-SolicitudesClientes"
              azureSubscriptionEndpoint: "Azure Vault-SolicitudesClientes"
              action: Push an image
              includeLatestTag: true
          - task: replacetokens@4
            displayName: Replace tokens
            inputs:
              rootDirectory: ./
              targetFiles: >-
                deployment.yaml

                Ingress.yaml

                service.yaml
              tokenPattern: azpipelines
              tokenPrefix: ""
              tokenSuffix: ""
              writeBOM: false
              verbosity: detailed
              actionOnMissing: fail
              actionOnNoFiles: fail
          - task: KubectlInstaller@0
            displayName: Instalar Kubectl latest
          - task: KubernetesManifest@0
            displayName: deploy Api
            inputs:
              kubernetesServiceConnection: "rke-tes-Utilitarios-Transversales-SolicitudesClientes"
              namespace: default
              manifests: deployment.yaml
          - task: Kubernetes@1
            displayName: kubectl rollout
            inputs:
              kubernetesServiceEndpoint: "rke-tes-Utilitarios-Transversales-SolicitudesClientes"
              namespace: default
              command: rollout
              arguments: restart deployment app-gestor-solicitudes
          - task: KubernetesManifest@0
            displayName: deploy Servicio
            inputs:
              kubernetesServiceConnection: "rke-tes-Utilitarios-Transversales-SolicitudesClientes"
              namespace: default
              manifests: service.yaml
          - task: KubernetesManifest@0
            displayName: deploy Ingress
            inputs:
              kubernetesServiceConnection: "rke-tes-Utilitarios-Transversales-SolicitudesClientes"
              namespace: default
              manifests: Ingress.yaml
      - job: Aprobacion
        dependsOn: Job_2
        condition: succeeded()
        displayName: Esperando por aprobaciones
        pool: server
        timeoutInMinutes: 4320
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440
            inputs:
              notifyUsers: |
                $(Aprobadores)

                angelo.bernardi@consalud.cl
              instructions: "Su aprobación porfa para TES"
              onTimeout: "resume"
