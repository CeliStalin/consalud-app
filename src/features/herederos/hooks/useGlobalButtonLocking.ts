import { useCallback, useEffect, useRef, useState } from 'react';
import { useButtonLockingContext } from '../contexts/ButtonLockingContext';

export interface UseGlobalButtonLockingReturn {
  // Estados
  isExternalTabOpen: boolean;
  loading: boolean;
  error: string | null;
  tabUrl: string | null;
  transactionToken: string | null;

  // Estados de bloqueo (del contexto global)
  isButtonsLocked: boolean;
  lockReason: string | null;

  // Acciones
  openExternalTab: (url: string) => Promise<void>;
  closeExternalTab: () => void;
  checkTabStatus: () => boolean;

  // Acciones de bloqueo
  lockButtons: (reason: string) => void;
  unlockButtons: () => void;

  // Utilidades
  isLockedByReason: (reason: string) => boolean;
  getLockDuration: () => number | null;
  hasActiveTransaction: boolean;
}

/**
 * Hook mejorado que combina el manejo de pesta√±as externas con el bloqueo global de botones
 * Incluye detecci√≥n robusta de cierre de pesta√±as y sincronizaci√≥n con el estado global
 */
export const useGlobalButtonLocking = (): UseGlobalButtonLockingReturn => {
  const [isExternalTabOpen, setIsExternalTabOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [tabUrl, setTabUrl] = useState<string | null>(null);
  const [transactionToken, setTransactionToken] = useState<string | null>(null);

  // Referencias para el control de la pesta√±a
  const tabRef = useRef<Window | null>(null);
  const intervalRef = useRef<number | undefined>(undefined);
  const checkIntervalRef = useRef<number | undefined>(undefined);

  // Contexto global de bloqueo de botones
  const {
    isLocked: isButtonsLocked,
    lockReason,
    lockButtons,
    unlockButtons,
    isLockedByReason,
    getLockDuration
  } = useButtonLockingContext();

  // Debug: Verificar el contexto de bloqueo
  console.log('üîç [Global] Contexto de bloqueo disponible:', {
    isButtonsLocked,
    lockReason,
    hasLockButtons: typeof lockButtons === 'function',
    hasUnlockButtons: typeof unlockButtons === 'function'
  });

  /**
   * Abre una nueva pesta√±a externa y bloquea los botones
   */
  const openExternalTab = useCallback(async (url: string) => {
    console.log('üöÄ [Global] INICIO openExternalTab - URL:', url);
    console.log('üîç [Global] Estado inicial:', {
      isExternalTabOpen,
      tabRef: !!tabRef.current,
      loading,
      error
    });

    try {
      setLoading(true);
      setError(null);

      console.log('üöÄ [Global] Abriendo pesta√±a externa:', url);
      console.log('üîç [Global] Estado antes de abrir:', { isExternalTabOpen, tabRef: !!tabRef.current });

      // Verificar que la URL sea v√°lida
      if (!url || !url.startsWith('http')) {
        throw new Error('URL inv√°lida para abrir en pesta√±a externa');
      }

      // Verificar si ya hay una pesta√±a abierta
      if (isExternalTabOpen || tabRef.current) {
        throw new Error('Ya hay una pesta√±a externa abierta. Cierre la pesta√±a actual antes de abrir una nueva.');
      }

      // Abrir nueva pesta√±a
      console.log('üîÑ [Global] Llamando a window.open...');
      let newTab = window.open(url, '_blank', 'noopener,noreferrer');
      console.log('üîÑ [Global] window.open resultado:', {
        newTab: !!newTab,
        closed: newTab?.closed,
        newTabType: typeof newTab,
        newTabConstructor: newTab?.constructor?.name
      });

      // SOLUCI√ìN TEMPORAL: Si newTab es null pero sabemos que la pesta√±a se abre,
      // crear un objeto mock para continuar con el flujo
      if (!newTab) {
        console.warn('‚ö†Ô∏è [Global] window.open retorn√≥ null, pero la pesta√±a se abre. Creando referencia mock...');

        // Crear un objeto mock que simule una pesta√±a abierta
        newTab = {
          closed: false,
          close: () => console.log('Mock tab closed'),
          focus: () => console.log('Mock tab focused'),
          openTime: Date.now() // Timestamp para verificaci√≥n de tiempo m√≠nimo
        } as Window;

        console.log('‚úÖ [Global] Referencia mock creada, continuando con bloqueo...');
      }

      // Verificaci√≥n adicional: si la pesta√±a se abre pero se cierra inmediatamente
      // (com√∫n cuando el navegador bloquea popups)
      setTimeout(() => {
        if (newTab.closed) {
          console.warn('‚ö†Ô∏è [Global] La pesta√±a se cerr√≥ inmediatamente despu√©s de abrirse (posible bloqueo de popup)');
        }
      }, 100);

      // Verificar que la pesta√±a se abri√≥ correctamente
      console.log('üîç [Global] Verificando estado de la pesta√±a:', {
        newTab: !!newTab,
        closed: newTab?.closed,
        newTabType: typeof newTab,
        newTabConstructor: newTab?.constructor?.name
      });

      if (newTab && !newTab.closed) {
        console.log('‚úÖ [Global] Pesta√±a abierta correctamente, verificando acceso...');
        console.log('üîç [Global] Pesta√±a v√°lida detectada:', {
          isWindow: newTab instanceof Window,
          hasLocation: 'location' in newTab,
          hasClosed: 'closed' in newTab,
          closedValue: newTab.closed
        });

        // Verificaci√≥n adicional: intentar acceder a la pesta√±a
        try {
          console.log('üîç [Global] Iniciando verificaci√≥n de acceso a pesta√±a...');

          // Intentar acceder a la pesta√±a para verificar que est√° realmente abierta
          const testAccess = newTab.closed;
          console.log('üîç [Global] Test de acceso a pesta√±a:', { testAccess });

          if (testAccess) {
            console.error('‚ùå [Global] Pesta√±a se cerr√≥ inmediatamente despu√©s de abrirse');
            throw new Error('La pesta√±a se cerr√≥ inmediatamente despu√©s de abrirse');
          }

          console.log('‚úÖ [Global] Pesta√±a accesible, procediendo con bloqueo...');

          // Generar token de transacci√≥n √∫nico
          const token = `tab_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
          setTransactionToken(token);

          // Guardar referencia de la pesta√±a
          tabRef.current = newTab;
          setTabUrl(url);
          setIsExternalTabOpen(true);

          console.log('üîç [Global] Estado despu√©s de configurar:', {
            isExternalTabOpen: true,
            tabRef: !!tabRef.current,
            tabClosed: newTab.closed,
            transactionToken: token
          });

          // Bloquear botones globalmente SOLO si la pesta√±a se abri√≥ correctamente
          console.log('üîí [Global] ANTES de lockButtons - Token:', token);
          lockButtons(`Pesta√±a externa abierta - Token: ${token}`);
          console.log('üîí [Global] DESPU√âS de lockButtons - Token:', token);

          // Iniciar verificaci√≥n peri√≥dica del estado de la pesta√±a
          startTabStatusCheck();

          console.log('‚úÖ [Global] Pesta√±a externa abierta exitosamente');
        } catch (accessError) {
          console.error('‚ùå [Global] Error al acceder a la pesta√±a:', accessError);
          console.error('‚ùå [Global] Detalles del error de acceso:', {
            errorMessage: accessError.message,
            errorStack: accessError.stack,
            newTabClosed: newTab?.closed
          });
          throw new Error('No se pudo acceder a la pesta√±a abierta');
        }
      } else {
        console.error('‚ùå [Global] Pesta√±a no se abri√≥ correctamente:', {
          newTab: !!newTab,
          closed: newTab?.closed,
          newTabType: typeof newTab,
          newTabConstructor: newTab?.constructor?.name
        });
        throw new Error('La pesta√±a se cerr√≥ inmediatamente o no se pudo abrir correctamente');
      }
    } catch (err: any) {
      console.error('‚ùå [Global] Error al abrir pesta√±a externa:', err);
      console.error('‚ùå [Global] Stack trace del error:', err.stack);
      setError(err.message || 'Error al abrir la pesta√±a externa');
      // Re-lanzar la excepci√≥n para que sea capturada por el llamador
      console.log('üîÑ [Global] Re-lanzando excepci√≥n...');
      throw err;
    } finally {
      console.log('üîÑ [Global] FINALLY - setLoading(false)');
      setLoading(false);
    }
  }, [isExternalTabOpen, lockButtons]);

  /**
   * Cierra la pesta√±a externa y desbloquea los botones
   */
  const closeExternalTab = useCallback(() => {
    console.log('üîí [Global] Cerrando pesta√±a externa');

    // Detener verificaciones
    stopTabStatusCheck();
    stopPeriodicCheck();

    // Intentar cerrar la pesta√±a si est√° abierta
    if (tabRef.current && !tabRef.current.closed) {
      try {
        tabRef.current.close();
      } catch (err) {
        console.warn('No se pudo cerrar la pesta√±a externa:', err);
      }
    }

    // Limpiar estados
    tabRef.current = null;
    setIsExternalTabOpen(false);
    setTabUrl(null);
    setError(null);
    setTransactionToken(null);

    // Desbloquear botones si estaban bloqueados por pesta√±a externa
    if (isLockedByReason('Pesta√±a externa abierta - Token:')) {
      console.log('üîì [Global] Desbloqueando botones - pesta√±a externa cerrada');
      unlockButtons();
    }

    // Emitir evento personalizado
    window.dispatchEvent(new CustomEvent('external-tab-closed', {
      detail: { timestamp: Date.now() }
    }));
  }, [isLockedByReason, unlockButtons]);

  /**
   * Verifica si la pesta√±a externa sigue abierta
   */
  const checkTabStatus = useCallback((): boolean => {
    if (!tabRef.current) {
      return false;
    }

    try {
      // Si es un objeto mock, usar detecci√≥n alternativa
      if (tabRef.current.constructor?.name === 'Object') {
        console.log('üîç [Global] Verificando pesta√±a mock - usando detecci√≥n alternativa');

        // Para objetos mock, usar una estrategia m√°s conservadora
        // Solo desbloquear si el usuario hace clic en la pesta√±a principal
        // y ha pasado un tiempo m√≠nimo desde que se abri√≥ la pesta√±a

        // Verificar si ha pasado tiempo suficiente (5 segundos m√≠nimo)
        const timeSinceOpen = Date.now() - (tabRef.current as any).openTime;
        const minTimeOpen = 5000; // 5 segundos

        if (document.hasFocus() &&
            document.visibilityState === 'visible' &&
            timeSinceOpen > minTimeOpen) {
          console.log('üîÑ [Global] Usuario enfocado en pesta√±a principal despu√©s de tiempo m√≠nimo - asumiendo cierre de pesta√±a externa');
          closeExternalTab();
          return false;
        }

        return true; // Asumir que est√° abierta si no hay evidencia de cierre
      }

      // Para ventanas reales, usar la verificaci√≥n normal
      const isClosed = tabRef.current.closed;

      if (isClosed) {
        console.log('üìã [Global] Pesta√±a externa cerrada detectada (closed=true)');
        closeExternalTab();
        return false;
      }

      // Si llegamos aqu√≠, la pesta√±a est√° abierta
      // No necesitamos verificar location porque puede estar en un dominio diferente
      return true;
    } catch (err) {
      // Solo considerar cerrada si hay una excepci√≥n al acceder a la propiedad closed
      console.log('üìã [Global] Pesta√±a externa cerrada (excepci√≥n al acceder a closed):', err);
      closeExternalTab();
      return false;
    }
  }, [closeExternalTab]);

  /**
   * Inicia la verificaci√≥n peri√≥dica del estado de la pesta√±a
   */
  const startTabStatusCheck = useCallback(() => {
    console.log('‚è∞ [Global] Iniciando verificaci√≥n peri√≥dica de pesta√±a externa');

    // Verificaci√≥n inmediata
    checkTabStatus();

    // Verificaci√≥n peri√≥dica cada 1 segundo
    intervalRef.current = window.setInterval(() => {
      checkTabStatus();
    }, 1000);

    // Verificaci√≥n adicional cada 5 segundos para casos edge
    checkIntervalRef.current = window.setInterval(() => {
      if (tabRef.current && !checkTabStatus()) {
        console.log('üîÑ [Global] Verificaci√≥n adicional: pesta√±a cerrada');
      }
    }, 5000);
  }, [checkTabStatus]);

  /**
   * Detiene la verificaci√≥n peri√≥dica
   */
  const stopTabStatusCheck = useCallback(() => {
    if (intervalRef.current) {
      console.log('‚èπÔ∏è [Global] Deteniendo verificaci√≥n peri√≥dica de pesta√±a');
      clearInterval(intervalRef.current);
      intervalRef.current = undefined;
    }
  }, []);

  /**
   * Detiene la verificaci√≥n peri√≥dica adicional
   */
  const stopPeriodicCheck = useCallback(() => {
    if (checkIntervalRef.current) {
      console.log('‚èπÔ∏è [Global] Deteniendo verificaci√≥n peri√≥dica adicional');
      clearInterval(checkIntervalRef.current);
      checkIntervalRef.current = undefined;
    }
  }, []);

  /**
   * Limpia recursos al desmontar el componente
   */
  useEffect(() => {
    return () => {
      stopTabStatusCheck();
      stopPeriodicCheck();
    };
  }, [stopTabStatusCheck, stopPeriodicCheck]);

  /**
   * Maneja el evento de cierre de la ventana principal
   */
  useEffect(() => {
    const handleBeforeUnload = () => {
      closeExternalTab();
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [closeExternalTab]);

  return {
    // Estados
    isExternalTabOpen,
    loading,
    error,
    tabUrl,
    transactionToken,

    // Estados de bloqueo
    isButtonsLocked,
    lockReason,

    // Acciones
    openExternalTab,
    closeExternalTab,
    checkTabStatus,

    // Acciones de bloqueo
    lockButtons,
    unlockButtons,

  // Utilidades
  isLockedByReason,
  getLockDuration,

  // Verificaci√≥n de transacci√≥n activa
  hasActiveTransaction: !!transactionToken
  };
};
