import React, { useEffect, useRef, useState } from 'react';
import { encriptarParametrosMandatos } from '../services/herederosService';
import './styles/MandatosIframeModal.css';

interface MandatosIframeModalProps {
  isOpen: boolean;
  onClose: () => void;
  iframeUrl: string | null;
  transactionId: string | null;
  loading: boolean;
  error: string | null;
  onIframeLoad?: () => void;
}

const MandatosIframeModal: React.FC<MandatosIframeModalProps> = ({
  isOpen,
  onClose,
  iframeUrl,
  transactionId,
  loading,
  error,
  onIframeLoad
}) => {
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [iframeError, setIframeError] = useState<string | null>(null);
  const [iframeLoading, setIframeLoading] = useState(true);
  const [hasResourceErrors, setHasResourceErrors] = useState(false);
  const [proxyActivated, setProxyActivated] = useState(false);
  const [proxyCountdown, setProxyCountdown] = useState(0);
  const [useInternalWindow, setUseInternalWindow] = useState(false);
  const [useTabSimulation, setUseTabSimulation] = useState(false);
  const [useRealWindow, setUseRealWindow] = useState(false);
  const [popupWindow, setPopupWindow] = useState<Window | null>(null);
  const [useDirectWindow, setUseDirectWindow] = useState(false);
  const [directContent, setDirectContent] = useState<string>('');
  const [directLoading, setDirectLoading] = useState(false);
  const [tabContent, setTabContent] = useState<string>('');
  const [tabLoading, setTabLoading] = useState(false);

  // Iniciar proxy autom√°ticamente cuando se abre el modal
  useEffect(() => {
    if (isOpen && iframeUrl) {
      console.log('üöÄ Modal abierto, verificando proxy...');
      startProxy().then(async proxyRunning => {
        if (proxyRunning) {
          console.log('‚úÖ Proxy disponible, activando autom√°ticamente...');
          // Activar proxy autom√°ticamente para URLs de mandatos
          if (iframeUrl.includes('mandatos.consalud.des')) {
            setHasResourceErrors(true);
            setProxyCountdown(1);
            setTimeout(async () => {
              if (!proxyActivated) {
                console.log('üîÑ Activando proxy autom√°ticamente...');
                await handleUseProxy();
              }
            }, 1000);
          }
        } else {
          console.log('‚ö†Ô∏è Proxy no disponible, el modal funcionar√° sin proxy');
        }
      });
    }
  }, [isOpen, iframeUrl]);

  // Detener proxy cuando se cierra el modal
  useEffect(() => {
    if (!isOpen) {
      console.log('üõë Modal cerrado, deteniendo proxy...');
      stopProxy();
    }
  }, [isOpen]);

  // Resetear estados cuando cambie la URL
  useEffect(() => {
    console.log('üîÑ useEffect iframeUrl triggered, iframeUrl:', iframeUrl);
    console.log('üîÑ Tipo de iframeUrl:', typeof iframeUrl);
    console.log('üîÑ iframeUrl es null/undefined:', iframeUrl === null || iframeUrl === undefined);

    if (iframeUrl) {
      setIframeError(null);
      setIframeLoading(true);
      setHasResourceErrors(false);
      setProxyActivated(false);
      setProxyCountdown(0);
      console.log('üîÑ Nueva URL de iframe:', iframeUrl);
      console.log('üîç Longitud de URL:', iframeUrl.length);
      console.log('üîç URL v√°lida:', iframeUrl.startsWith('http'));
      console.log('üîç URL completa:', JSON.stringify(iframeUrl));

      // Verificar que la URL sea v√°lida
      if (!iframeUrl.startsWith('http')) {
        console.error('‚ùå URL inv√°lida - no comienza con http:', iframeUrl);
        setIframeError('URL inv√°lida generada por el sistema');
        setIframeLoading(false);
      } else {
        // Activar proxy autom√°ticamente para URLs de mandatos.consalud.des
        if (iframeUrl.includes('mandatos.consalud.des')) {
          console.log('üîÑ URL de mandatos detectada, activando proxy autom√°ticamente...');
          setHasResourceErrors(true);
          setProxyCountdown(2);

          const countdownInterval = setInterval(() => {
            setProxyCountdown(prev => {
              if (prev <= 1) {
                clearInterval(countdownInterval);
                if (!proxyActivated) {
                  console.log('üîÑ Activando proxy autom√°ticamente para URL de mandatos...');
                  handleUseProxy();
                }
                return 0;
              }
              return prev - 1;
            });
          }, 1000);
        }
      }
    } else {
      console.log('‚ö†Ô∏è iframeUrl es null o undefined, no se puede cargar');
    }
  }, [iframeUrl]);

  // Detectar errores de recursos en la consola
  useEffect(() => {
    if (!isOpen) return;

    const originalConsoleError = console.error;
    const originalConsoleWarn = console.warn;

    console.error = (...args) => {
      const message = args.join(' ');
      if (message.includes('404') || message.includes('ERR_ABORTED') || message.includes('Failed to load resource') ||
          message.includes('CORS') || message.includes('X-Frame-Options') || message.includes('Content-Security-Policy')) {
        console.log('üö® Error de recurso/CORS detectado en iframe:', message);
        setHasResourceErrors(true);
      }
      originalConsoleError.apply(console, args);
    };

    console.warn = (...args) => {
      const message = args.join(' ');
      if (message.includes('404') || message.includes('ERR_ABORTED') || message.includes('Failed to load resource') ||
          message.includes('CORS') || message.includes('X-Frame-Options') || message.includes('Content-Security-Policy')) {
        console.log('‚ö†Ô∏è Advertencia de recurso/CORS detectada en iframe:', message);
        setHasResourceErrors(true);
      }
      originalConsoleWarn.apply(console, args);
    };

    return () => {
      console.error = originalConsoleError;
      console.warn = originalConsoleWarn;
    };
  }, [isOpen]);

  // Verificar headers de respuesta para detectar problemas CORS
  const checkCorsHeaders = async () => {
    if (!iframeUrl || proxyActivated) return; // No verificar si ya est√° usando proxy

    try {
      console.log('üîç Verificando headers CORS para:', iframeUrl);
      const response = await fetch(iframeUrl, {
        method: 'HEAD',
        mode: 'no-cors' // Esto evita errores CORS pero no nos da los headers
      });
      console.log('üìã Respuesta HEAD:', response);

      // Si la respuesta es 'opaque' con status 0, es un problema CORS
      if (response.type === 'opaque' && response.status === 0) {
        console.log('üö® Problema CORS confirmado - activando proxy autom√°ticamente');
        setHasResourceErrors(true);

        // Activar proxy autom√°ticamente despu√©s de un breve delay
        setProxyCountdown(3);
        const countdownInterval = setInterval(() => {
          setProxyCountdown(prev => {
            if (prev <= 1) {
              clearInterval(countdownInterval);
              if (!proxyActivated) {
                console.log('üîÑ Activando proxy autom√°ticamente...');
                handleUseProxy();
              }
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
      }
    } catch (error) {
      console.log('‚ùå Error al verificar headers CORS:', error);
      // Esto es esperado debido a CORS, pero nos ayuda a confirmar el problema
    }
  };

  // Verificar si hay problemas de carga de datos en el iframe
  const checkIframeDataLoading = () => {
    if (!isOpen || !iframeRef.current) return;

    try {
      const iframe = iframeRef.current;
      if (iframe.contentDocument) {
        const body = iframe.contentDocument.body;
        if (body) {
          // Buscar elementos que indican que los datos no se cargaron
          const bancosSelect = body.querySelector('select[name*="banco"], select[id*="banco"]') as HTMLSelectElement;
          const beneficiarioSelect = body.querySelector('select[name*="beneficiario"], select[id*="beneficiario"]') as HTMLSelectElement;
          const errorMessages = body.querySelectorAll('*[class*="error"], *[id*="error"]');

          let hasDataIssues = false;

          if (bancosSelect && bancosSelect.options && bancosSelect.options.length <= 1) {
            console.log('‚ö†Ô∏è No se encontraron bancos en el iframe');
            hasDataIssues = true;
          }

          if (beneficiarioSelect && beneficiarioSelect.options && beneficiarioSelect.options.length <= 1) {
            console.log('‚ö†Ô∏è No se encontraron beneficiarios en el iframe');
            hasDataIssues = true;
          }

          if (errorMessages.length > 0) {
            console.log('‚ö†Ô∏è Se encontraron mensajes de error en el iframe:', errorMessages.length);
            hasDataIssues = true;
          }

          if (hasDataIssues && !proxyActivated) {
            console.log('üîÑ Problemas de datos detectados, activando proxy...');
            setHasResourceErrors(true);
            handleUseProxy();
          }
        }
      }
    } catch (error) {
      console.log('üîí No se puede acceder al contenido del iframe (CORS):', error);
      // Esto es normal debido a pol√≠ticas de CORS
    }
  };

  // Verificar si el proxy est√° disponible
  const checkProxyAvailability = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/test');
      if (response.ok) {
        console.log('‚úÖ Proxy disponible en localhost:3001');
        return true;
      }
    } catch (error) {
      console.log('‚ùå Proxy no disponible:', error);
    }
    return false;
  };

  // Iniciar el servidor proxy
  const startProxy = async () => {
    try {
      console.log('üöÄ Verificando servidor proxy...');

      // Verificar si ya est√° ejecut√°ndose
      const isRunning = await checkProxyAvailability();
      if (isRunning) {
        console.log('‚úÖ Proxy ya est√° ejecut√°ndose');
        return true;
      }

      console.log('‚ö†Ô∏è Proxy no est√° ejecut√°ndose');
      console.log('‚ÑπÔ∏è Para iniciar el proxy manualmente, ejecute: node src/server/proxy.js');
      return false;
    } catch (error) {
      console.log('‚ö†Ô∏è Error verificando proxy:', error);
      console.log('‚ÑπÔ∏è El proxy debe iniciarse manualmente: node src/server/proxy.js');
      return false;
    }
  };

  // Detener el servidor proxy
  const stopProxy = async () => {
    try {
      console.log('üõë Verificando si se debe detener el proxy...');

      // Solo loguear que el modal se cerr√≥
      // El proxy puede seguir ejecut√°ndose para otros usos
      console.log('‚ÑπÔ∏è Modal cerrado. El proxy puede seguir ejecut√°ndose para otros usos.');
      console.log('‚ÑπÔ∏è Para detener el proxy manualmente, use Ctrl+C en la terminal donde est√° ejecut√°ndose.');
    } catch (error) {
      console.log('‚ö†Ô∏è Error en verificaci√≥n de proxy:', error);
    }
  };

  // Manejar el evento de carga del iframe
  const handleIframeLoad = () => {
    console.log('üìÑ Iframe de mandatos cargado exitosamente');
    console.log('üìÑ URL actual del iframe:', iframeRef.current?.src);
    console.log('üìÑ URL esperada:', iframeUrl);

    // Verificar que la URL cargada sea la correcta (permitir proxy)
    const currentSrc = iframeRef.current?.src;
    const isProxyUrl = currentSrc?.includes('localhost:3001/api/mandatos-iframe');
    const isOriginalUrl = currentSrc === iframeUrl;

    if (!isProxyUrl && !isOriginalUrl) {
      console.error('‚ùå URL del iframe no coincide con la esperada');
      console.error('‚ùå URL cargada:', currentSrc);
      console.error('‚ùå URL esperada:', iframeUrl);
      setIframeError('Error: La URL cargada no coincide con la esperada');
      setIframeLoading(false);
      return;
    }

    if (isProxyUrl) {
      console.log('‚úÖ Iframe cargado a trav√©s del proxy CORS');
    }

    // Configurar comunicaci√≥n postMessage
    setupPostMessageCommunication();

    // Verificar si el iframe tiene contenido despu√©s de un breve delay
    setTimeout(() => {
      try {
        const iframe = iframeRef.current;
        if (iframe && iframe.contentDocument) {
          const body = iframe.contentDocument.body;
          if (body) {
            const hasContent = body.innerHTML.trim().length > 0;
            const hasTables = body.querySelectorAll('table').length > 0;
            const hasData = body.textContent && body.textContent.trim().length > 100;

            console.log('üîç Verificaci√≥n de contenido del iframe:');
            console.log('üîç Tiene contenido HTML:', hasContent);
            console.log('üîç Tiene tablas:', hasTables);
            console.log('üîç Tiene texto significativo:', hasData);
            console.log('üîç Longitud del contenido:', body.innerHTML.length);

            if (!hasContent || !hasData) {
              console.warn('‚ö†Ô∏è El iframe parece estar vac√≠o o sin datos');
              // No establecer error autom√°ticamente, solo loguear
            }
          }
        }
      } catch (error) {
        console.log('üîí No se puede acceder al contenido del iframe (CORS):', error);
        // Esto es normal debido a pol√≠ticas de CORS
      }
    }, 2000);

    setIframeLoading(false);
    setIframeError(null);

    // Verificar headers CORS despu√©s de cargar
    setTimeout(() => {
      checkCorsHeaders();
    }, 1000);

    // Verificar datos despu√©s de un delay m√°s largo
    setTimeout(() => {
      checkIframeDataLoading();
    }, 3000);

    if (onIframeLoad) {
      onIframeLoad();
    }
  };

  // Configurar comunicaci√≥n postMessage con el iframe
  const setupPostMessageCommunication = () => {
    const handleMessage = (event: MessageEvent) => {
      // Verificar origen del mensaje (solo aceptar del iframe)
      if (event.origin !== 'http://mandatos.consalud.des' &&
          event.origin !== 'http://localhost:3001') {
        return;
      }

      console.log('üì® Mensaje recibido del iframe:', event.data);

      if (event.data.type === 'AJAX_REQUEST') {
        // Manejar solicitud AJAX desde el iframe
        handleAjaxRequestFromIframe(event.data);
      } else if (event.data.type === 'DATA_LOADED') {
        // Notificar que los datos se cargaron
        console.log('‚úÖ Datos cargados en el iframe:', event.data.data);
      } else if (event.data.type === 'ERROR') {
        // Manejar errores del iframe
        console.error('‚ùå Error en el iframe:', event.data.error);
      }
    };

    window.addEventListener('message', handleMessage);

    // Enviar mensaje al iframe para configurar comunicaci√≥n
    setTimeout(() => {
      if (iframeRef.current?.contentWindow) {
        iframeRef.current.contentWindow.postMessage({
          type: 'PARENT_READY',
          proxyUrl: 'http://localhost:3001/api/mandatos-ajax'
        }, '*');
        console.log('üì§ Mensaje enviado al iframe: PARENT_READY');
      }
    }, 1000);

    // Cleanup
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  };

  // Manejar solicitudes AJAX desde el iframe
  const handleAjaxRequestFromIframe = async (data: any) => {
    try {
      console.log('üîÑ Procesando solicitud AJAX desde iframe:', data);

      const { method, url, body } = data;
      const methodName = url.match(/MethodName=([^&]+)/)?.[1];

      if (!methodName) {
        console.error('‚ùå No se pudo extraer MethodName de la URL');
        return;
      }

      const proxyUrl = `http://localhost:3001/api/mandatos-ajax/${methodName}`;
      console.log('üîÑ Redirigiendo a proxy:', proxyUrl);

      const response = await fetch(proxyUrl, {
        method: method || 'GET',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: body
      });

      const result = await response.text();
      console.log('‚úÖ Respuesta del proxy:', result);

      // Enviar respuesta de vuelta al iframe
      if (iframeRef.current?.contentWindow) {
        iframeRef.current.contentWindow.postMessage({
          type: 'AJAX_RESPONSE',
          originalUrl: url,
          data: result,
          status: response.status
        }, '*');
      }

    } catch (error) {
      console.error('‚ùå Error procesando solicitud AJAX:', error);

      // Enviar error de vuelta al iframe
      if (iframeRef.current?.contentWindow) {
        iframeRef.current.contentWindow.postMessage({
          type: 'AJAX_ERROR',
          originalUrl: data.url,
          error: error instanceof Error ? error.message : String(error)
        }, '*');
      }
    }
  };

  // Manejar errores del iframe
  const handleIframeError = () => {
    console.error('‚ùå Error al cargar iframe de mandatos');
    setIframeLoading(false);
    setIframeError('Error al cargar el formulario de mandatos. Verifique la URL o intente nuevamente.');
  };

  // Abrir URL en nueva pesta√±a para debugging
  const handleOpenInNewTab = () => {
    if (iframeUrl) {
      console.log('üîó Abriendo URL en nueva pesta√±a:', iframeUrl);
      window.open(iframeUrl, '_blank', 'noopener,noreferrer');
    }
  };

  // Recargar el iframe
  const handleReloadIframe = () => {
    if (iframeRef.current && iframeUrl) {
      console.log('üîÑ Recargando iframe...');
      setIframeLoading(true);
      setIframeError(null);

      // Forzar recarga del iframe
      iframeRef.current.src = '';
      setTimeout(() => {
        if (iframeRef.current) {
          iframeRef.current.src = iframeUrl;
        }
      }, 100);
    }
  };

  // Intentar cargar con diferentes configuraciones de CORS
  const handleReloadWithCorsFix = () => {
    if (iframeRef.current && iframeUrl) {
      console.log('üîß Intentando recargar con configuraci√≥n CORS mejorada...');
      setIframeLoading(true);
      setIframeError(null);
      setHasResourceErrors(false);

      // Limpiar iframe completamente
      if (iframeRef.current) {
        iframeRef.current.src = '';
        iframeRef.current.removeAttribute('sandbox');
        iframeRef.current.removeAttribute('allow');
        iframeRef.current.removeAttribute('referrerPolicy');
      }

      setTimeout(() => {
        if (iframeRef.current) {
          // Reconfigurar con permisos m√°s amplios
          iframeRef.current.setAttribute('sandbox', 'allow-same-origin allow-scripts allow-forms allow-popups allow-top-navigation allow-downloads allow-modals allow-presentation allow-orientation-lock allow-pointer-lock');
          iframeRef.current.setAttribute('allow', 'fullscreen; camera; microphone; geolocation; payment; usb; autoplay; encrypted-media');
          iframeRef.current.setAttribute('referrerPolicy', 'no-referrer');
          iframeRef.current.src = iframeUrl;
        }
      }, 200);
    }
  };

  // Usar proxy para solucionar problemas CORS
  const handleUseProxy = async () => {
    if (iframeRef.current && iframeUrl && !proxyActivated) {
      console.log('üîÑ Usando proxy para solucionar CORS...');
      setProxyActivated(true);
      setIframeLoading(true);
      setIframeError(null);
      setHasResourceErrors(false);

      // Verificar si el proxy est√° disponible
      const proxyAvailable = await checkProxyAvailability();
      if (!proxyAvailable) {
        console.log('‚ùå Proxy no disponible, mostrando error');
        setIframeError('El servidor proxy no est√° disponible. Por favor, inicie el servidor proxy ejecutando: node src/server/proxy.js');
        setIframeLoading(false);
        setProxyActivated(false);
        return;
      }

      // Construir URL del proxy
      const proxyUrl = `http://localhost:3001/api/mandatos-iframe?url=${encodeURIComponent(iframeUrl)}`;
      console.log('üîó URL del proxy:', proxyUrl);

      // Limpiar iframe completamente
      if (iframeRef.current) {
        iframeRef.current.src = '';
        iframeRef.current.removeAttribute('sandbox');
        iframeRef.current.removeAttribute('allow');
        iframeRef.current.removeAttribute('referrerPolicy');
      }

      setTimeout(() => {
        if (iframeRef.current) {
          // Configurar iframe para usar proxy con permisos amplios
          iframeRef.current.setAttribute('sandbox', 'allow-same-origin allow-scripts allow-forms allow-popups allow-top-navigation allow-downloads allow-modals allow-presentation allow-orientation-lock allow-pointer-lock');
          iframeRef.current.setAttribute('allow', 'fullscreen; camera; microphone; geolocation; payment; usb; autoplay; encrypted-media; clipboard-read; clipboard-write');
          iframeRef.current.setAttribute('referrerPolicy', 'no-referrer');
          iframeRef.current.src = proxyUrl;
        }
      }, 200);
    } else if (proxyActivated) {
      console.log('‚ö†Ô∏è Proxy ya activado, evitando activaci√≥n m√∫ltiple');
    }
  };

  // Obtener URL del iframe (con proxy si est√° disponible)
  const getIframeUrl = (): string | undefined => {
    if (!iframeUrl) return undefined;

    console.log('üîó URL original del iframe:', iframeUrl);
    console.log('üîó URL contiene mandatos.consalud.des:', iframeUrl.includes('mandatos.consalud.des'));
    console.log('üîó URL contiene par√°metro encriptado:', iframeUrl.includes('param='));

    // Para URLs de mandatos.consalud.des, siempre usar proxy si est√° disponible
    if (iframeUrl.includes('mandatos.consalud.des')) {
      const proxyUrl = `http://localhost:3001/api/mandatos-iframe?url=${encodeURIComponent(iframeUrl)}`;
      console.log('üîó URL del proxy generada:', proxyUrl);
      return proxyUrl;
    }

    // Para otras URLs, usar proxy solo si est√° activado o hay errores
    if (proxyActivated || hasResourceErrors) {
      const proxyUrl = `http://localhost:3001/api/mandatos-iframe?url=${encodeURIComponent(iframeUrl)}`;
      console.log('üîó URL del proxy generada (modo especial):', proxyUrl);
      return proxyUrl;
    }

    console.log('üîó Usando URL original sin proxy:', iframeUrl);
    return iframeUrl;
  };

  // Verificar y activar proxy autom√°ticamente para opciones especiales
  const ensureProxyForSpecialModes = async () => {
    if ((useTabSimulation || useInternalWindow) && !proxyActivated) {
      console.log('üîÑ Verificando proxy para modo especial...');
      const proxyAvailable = await checkProxyAvailability();
      if (proxyAvailable) {
        console.log('‚úÖ Proxy disponible, activando autom√°ticamente...');
        await handleUseProxy();
      } else {
        console.log('‚ùå Proxy no disponible para modo especial');
      }
    }
  };

  // Efecto para activar proxy autom√°ticamente en modos especiales
  useEffect(() => {
    ensureProxyForSpecialModes();
  }, [useTabSimulation, useInternalWindow]);

  // Abrir ventana real (sin CORS)
  const handleOpenRealWindow = () => {
    if (!iframeUrl) return;

    console.log('üöÄ Abriendo ventana real sin CORS...');

    // Cerrar ventana anterior si existe
    if (popupWindow && !popupWindow.closed) {
      popupWindow.close();
    }

    // Abrir nueva ventana
    const newWindow = window.open(
      iframeUrl,
      'mandatos-window',
      'width=1200,height=800,scrollbars=yes,resizable=yes,status=yes,location=yes,toolbar=yes,menubar=yes'
    );

    if (newWindow) {
      setPopupWindow(newWindow);
      setUseRealWindow(true);

      // Configurar comunicaci√≥n con la ventana
      const handleMessage = (event: MessageEvent) => {
        if (event.source === newWindow) {
          console.log('üì® Mensaje recibido de la ventana:', event.data);

          if (event.data.type === 'WINDOW_CLOSED') {
            console.log('üîí Ventana cerrada por el usuario');
            setPopupWindow(null);
            setUseRealWindow(false);
            handleClose();
          } else if (event.data.type === 'FORM_COMPLETED') {
            console.log('‚úÖ Formulario completado');
            setPopupWindow(null);
            setUseRealWindow(false);
            handleClose();
          }
        }
      };

      window.addEventListener('message', handleMessage);

      // Verificar si la ventana se cerr√≥
      const checkClosed = setInterval(() => {
        if (newWindow.closed) {
          console.log('üîí Ventana cerrada detectada');
          setPopupWindow(null);
          setUseRealWindow(false);
          clearInterval(checkClosed);
          window.removeEventListener('message', handleMessage);
        }
      }, 1000);

      // Limpiar despu√©s de 5 minutos
      setTimeout(() => {
        if (!newWindow.closed) {
          clearInterval(checkClosed);
        }
      }, 300000);

    } else {
      console.error('‚ùå No se pudo abrir la ventana (bloqueador de popups)');
      alert('Por favor, permita ventanas emergentes para esta p√°gina y vuelva a intentar.');
    }
  };

  // Cerrar ventana real
  const handleCloseRealWindow = () => {
    if (popupWindow && !popupWindow.closed) {
      popupWindow.close();
    }
    setPopupWindow(null);
    setUseRealWindow(false);
  };

  // Simular pesta√±a del navegador con URL encriptada
  const handleOpenTabSimulation = async () => {
    try {
      setTabLoading(true);
      // setError(null);
      console.log('üöÄ Abriendo simulaci√≥n de pesta√±a del navegador...');

      // Obtener datos del session storage para la encriptaci√≥n
      console.log('üîç Buscando datos en sessionStorage...');

      // Buscar en diferentes claves posibles
      const possibleKeys = [
        'titularContext',
        'formHerederoData',
        'formData'
      ];

      // Tambi√©n buscar claves que empiecen con 'formHerederoData_'
      const allKeys = Object.keys(sessionStorage);
      const herederoKeys = allKeys.filter(key => key.startsWith('formHerederoData_'));
      possibleKeys.push(...herederoKeys);

      // Priorizar claves de herederos (formHerederoData_RUT)
      possibleKeys.sort((a, b) => {
        if (a.startsWith('formHerederoData_') && !b.startsWith('formHerederoData_')) return -1;
        if (!a.startsWith('formHerederoData_') && b.startsWith('formHerederoData_')) return 1;
        return 0;
      });

      console.log('üîç Claves disponibles en sessionStorage:', allKeys);
      console.log('üîç Claves de herederos encontradas:', herederoKeys);

      let sessionData: any = null;
      let foundKey = '';

      for (const key of possibleKeys) {
        const data = sessionStorage.getItem(key);
        if (data) {
          try {
            const parsed = JSON.parse(data);
            console.log(`üîç Datos en ${key}:`, parsed);

            // Verificar si tiene los campos necesarios
            if (parsed.RutCompleto || parsed.rut || parsed.Rut) {
              sessionData = parsed;
              foundKey = key;
              console.log(`‚úÖ Datos encontrados en ${key}`);
              break;
            }
          } catch (error) {
            console.log(`‚ùå Error parseando ${key}:`, error);
          }
        }
      }

      if (!sessionData) {
        throw new Error('No se encontraron datos v√°lidos en el session storage. Claves disponibles: ' + allKeys.join(', '));
      }

      console.log('‚úÖ Datos encontrados en:', foundKey, sessionData);

      console.log('üìã Datos del session storage:', sessionData);

      // Extraer datos seg√∫n la estructura encontrada
      let rutAfiliado = '';
      let nombres = '';
      let apellidoPaterno = '';
      let apellidoMaterno = '';

      if (foundKey === 'titularContext') {
        // Estructura del titular
        rutAfiliado = (sessionData.rut || '').replace(/[.-]/g, '');
        nombres = sessionData.nombre || sessionData.nombres || '';
        apellidoPaterno = sessionData.apellidoPat || sessionData.apellidoPaterno || '';
        apellidoMaterno = sessionData.apellidoMat || sessionData.apellidoMaterno || '';
      } else {
        // Estructura del heredero (FormHerederoData)
        // RutCompleto ya viene en formato 15423048-3, mantener el formato para la API
        rutAfiliado = sessionData.RutCompleto || '';
        nombres = sessionData.NombrePersona || '';
        apellidoPaterno = sessionData.ApellidoPaterno || '';
        apellidoMaterno = sessionData.ApellidoMaterno || '';
      }

      console.log('üìã Datos extra√≠dos para encriptaci√≥n:', {
        rutAfiliado,
        nombres,
        apellidoPaterno,
        apellidoMaterno
      });

      console.log('üîç Estructura completa de sessionData:', sessionData);
      console.log('üîç Campos disponibles en sessionData:', Object.keys(sessionData));

      if (!rutAfiliado) {
        throw new Error('No se pudo extraer el RUT de los datos encontrados');
      }

      // Llamar al servicio de encriptaci√≥n
      const encryptedUrl = await encriptarParametrosMandatos(
        'SCELI',
        rutAfiliado,
        nombres,
        apellidoPaterno,
        apellidoMaterno
      );
      console.log('üîê URL encriptada recibida:', encryptedUrl);

      // Limpiar la URL (remover comillas y @ si existen)
      let cleanUrl = encryptedUrl.trim();
      if (cleanUrl.startsWith('"') && cleanUrl.endsWith('"')) {
        cleanUrl = cleanUrl.slice(1, -1);
      }
      if (cleanUrl.startsWith('@')) {
        cleanUrl = cleanUrl.slice(1);
      }

      console.log('üßπ URL limpia:', cleanUrl);

      if (!cleanUrl.startsWith('http')) {
        throw new Error(`URL encriptada inv√°lida: ${cleanUrl}`);
      }

      // Crear contenido HTML que simule una pesta√±a del navegador
      const tabHtml = `
        <!DOCTYPE html>
        <html lang="es">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Formulario de Mandatos - Consalud</title>
          <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              background: #f5f5f5;
              height: 100vh;
              overflow: hidden;
            }
            .browser-tab {
              background: white;
              height: 100vh;
              display: flex;
              flex-direction: column;
              box-shadow: 0 0 20px rgba(0,0,0,0.1);
            }
            .tab-header {
              background: #f8f9fa;
              border-bottom: 1px solid #e9ecef;
              padding: 8px 16px;
              display: flex;
              align-items: center;
              gap: 12px;
            }
            .tab-controls {
              display: flex;
              gap: 8px;
            }
            .tab-control {
              width: 12px;
              height: 12px;
              border-radius: 50%;
              border: none;
              cursor: pointer;
            }
            .tab-control.close { background: #ff5f57; }
            .tab-control.minimize { background: #ffbd2e; }
            .tab-control.maximize { background: #28ca42; }
            .tab-url {
              background: white;
              border: 1px solid #ddd;
              border-radius: 20px;
              padding: 6px 16px;
              flex: 1;
              font-size: 14px;
              color: #666;
              display: flex;
              align-items: center;
              gap: 8px;
            }
            .tab-url::before {
              content: "üîí";
              font-size: 12px;
            }
            .tab-content {
              flex: 1;
              position: relative;
            }
            .tab-iframe {
              width: 100%;
              height: 100%;
              border: none;
              background: white;
            }
            .loading {
              position: absolute;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              text-align: center;
              color: #666;
            }
            .spinner {
              width: 40px;
              height: 40px;
              border: 4px solid #f3f3f3;
              border-top: 4px solid #007bff;
              border-radius: 50%;
              animation: spin 1s linear infinite;
              margin: 0 auto 16px;
            }
            @keyframes spin {
              0% { transform: rotate(0deg); }
              100% { transform: rotate(360deg); }
            }
          </style>
          <script>
            // Interceptar y redirigir recursos est√°ticos al proxy
            (function() {
              const originalFetch = window.fetch;
              const originalXHROpen = XMLHttpRequest.prototype.open;

              // Interceptar fetch
              window.fetch = function(url, options) {
                if (typeof url === 'string' && (url.includes('.css') || url.includes('.js') || url.includes('.png') || url.includes('.jpg') || url.includes('.gif') || url.includes('.woff') || url.includes('.ttf'))) {
                  const proxyUrl = 'http://localhost:3001/api/mandatos-resource?url=' + encodeURIComponent(url);
                  console.log('üîÑ Redirigiendo recurso al proxy:', url, '->', proxyUrl);
                  return originalFetch(proxyUrl, options);
                }
                return originalFetch(url, options);
              };

              // Interceptar XMLHttpRequest
              XMLHttpRequest.prototype.open = function(method, url, ...args) {
                if (typeof url === 'string' && (url.includes('.css') || url.includes('.js') || url.includes('.png') || url.includes('.jpg') || url.includes('.gif') || url.includes('.woff') || url.includes('.ttf'))) {
                  const proxyUrl = 'http://localhost:3001/api/mandatos-resource?url=' + encodeURIComponent(url);
                  console.log('üîÑ Redirigiendo XHR al proxy:', url, '->', proxyUrl);
                  return originalXHROpen.call(this, method, proxyUrl, ...args);
                }
                return originalXHROpen.call(this, method, url, ...args);
              };

              // Interceptar creaci√≥n de elementos que cargan recursos
              const originalCreateElement = document.createElement;
              document.createElement = function(tagName) {
                const element = originalCreateElement.call(this, tagName);

                if (tagName.toLowerCase() === 'link') {
                  const originalSetAttribute = element.setAttribute;
                  element.setAttribute = function(name, value) {
                    if (name === 'href' && typeof value === 'string' && (value.includes('.css') || value.includes('.woff') || value.includes('.ttf'))) {
                      const proxyUrl = 'http://localhost:3001/api/mandatos-resource?url=' + encodeURIComponent(value);
                      console.log('üîÑ Redirigiendo link al proxy:', value, '->', proxyUrl);
                      return originalSetAttribute.call(this, name, proxyUrl);
                    }
                    return originalSetAttribute.call(this, name, value);
                  };
                }

                if (tagName.toLowerCase() === 'img') {
                  const originalSetAttribute = element.setAttribute;
                  element.setAttribute = function(name, value) {
                    if (name === 'src' && typeof value === 'string' && (value.includes('.png') || value.includes('.jpg') || value.includes('.gif'))) {
                      const proxyUrl = 'http://localhost:3001/api/mandatos-resource?url=' + encodeURIComponent(value);
                      console.log('üîÑ Redirigiendo imagen al proxy:', value, '->', proxyUrl);
                      return originalSetAttribute.call(this, name, proxyUrl);
                    }
                    return originalSetAttribute.call(this, name, value);
                  };
                }

                return element;
              };

              // Interceptar llamadas AJAX espec√≠ficas de mandatos
              const originalXHRSend = XMLHttpRequest.prototype.send;
              XMLHttpRequest.prototype.send = function(data) {
                const xhr = this;
                const originalUrl = xhr._url || '';

                if (originalUrl.includes('LLENADESTINATARIOPAGO') ||
                    originalUrl.includes('LLENABANCOS') ||
                    originalUrl.includes('LLENATIPOCUENTA') ||
                    originalUrl.includes('LLENACOMUNAS') ||
                    originalUrl.includes('LLENAREGIONES')) {
                  const proxyUrl = 'http://localhost:3001/api/mandatos-ajax/' + originalUrl.split('/').pop() + '?url=' + encodeURIComponent(originalUrl);
                  console.log('üîÑ Redirigiendo AJAX de mandatos al proxy:', originalUrl, '->', proxyUrl);
                  xhr._url = proxyUrl;
                }

                return originalXHRSend.call(this, data);
              };

              console.log('‚úÖ Interceptores de recursos y AJAX configurados');
            })();
          </script>
        </head>
        <body>
          <div class="browser-tab">
            <div class="tab-header">
              <div class="tab-controls">
                <button class="tab-control close" onclick="window.close()"></button>
                <button class="tab-control minimize"></button>
                <button class="tab-control maximize"></button>
              </div>
              <div class="tab-url">${cleanUrl}</div>
            </div>
            <div class="tab-content">
              <div class="loading" id="loading">
                <div class="spinner"></div>
                <div>Cargando formulario de mandatos...</div>
              </div>
              <iframe
                class="tab-iframe"
                src="${cleanUrl}"
                onload="document.getElementById('loading').style.display='none'"
                onerror="document.getElementById('loading').innerHTML='<div style=&quot;color:red;&quot;>Error al cargar el formulario</div>'"
              ></iframe>
            </div>
          </div>
        </body>
        </html>
      `;

      setTabContent(tabHtml);
      setUseTabSimulation(true);
      setUseDirectWindow(false);
      setUseInternalWindow(false);
      setUseRealWindow(false);

      console.log('‚úÖ Simulaci√≥n de pesta√±a creada exitosamente');

    } catch (error: any) {
      console.error('‚ùå Error creando simulaci√≥n de pesta√±a:', error);
      console.error('‚ùå Error creando simulaci√≥n de pesta√±a:', error.message || 'Error al crear la simulaci√≥n de pesta√±a');
    } finally {
      setTabLoading(false);
    }
  };

  // Cargar contenido directamente (sin iframe, sin CORS)
  const handleLoadDirectContent = async () => {
    if (!iframeUrl) return;

    console.log('üöÄ Cargando contenido directamente sin CORS...');
    console.log('üîó URL original del iframe:', iframeUrl);
    console.log('üîó URL contiene par√°metro encriptado:', iframeUrl.includes('param='));
    console.log('üîó URL contiene mandatos.consalud.des:', iframeUrl.includes('mandatos.consalud.des'));
    console.log('üîó URL comienza con http:', iframeUrl.startsWith('http'));
    console.log('üîó Longitud de la URL:', iframeUrl.length);

    // Verificar que la URL tenga el par√°metro encriptado
    if (!iframeUrl.includes('param=')) {
      console.error('‚ùå La URL no contiene el par√°metro encriptado necesario');
      console.error('‚ùå URL recibida:', iframeUrl);
      return;
    }

    setDirectLoading(true);
    setUseDirectWindow(true);
    setDirectContent('');

    try {
      // Usar el proxy para obtener el contenido HTML
      const proxyUrl = `http://localhost:3001/api/mandatos-iframe?url=${encodeURIComponent(iframeUrl)}`;
      console.log('üîÑ Cargando desde proxy:', proxyUrl);

      const response = await fetch(proxyUrl);
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }

      const htmlContent = await response.text();
      console.log('‚úÖ Contenido HTML obtenido:', htmlContent.length, 'caracteres');

      // Verificar que el contenido contenga elementos del formulario
      if (!htmlContent.includes('Cuentas Bancarias') && !htmlContent.includes('Seleccione Beneficiario')) {
        console.warn('‚ö†Ô∏è El contenido HTML no parece contener el formulario esperado');
        console.log('üîç Contenido recibido (primeros 500 caracteres):', htmlContent.substring(0, 500));
      }

      // Procesar el HTML para corregir rutas relativas
      const processedContent = processHtmlContent(htmlContent, iframeUrl);
      setDirectContent(processedContent);
      setDirectLoading(false);

      console.log('‚úÖ Contenido procesado y listo para mostrar');

    } catch (error) {
      console.error('‚ùå Error cargando contenido directo:', error);
      setDirectContent(`
        <div style="padding: 20px; text-align: center; color: #d32f2f;">
          <h3>Error al cargar el formulario</h3>
          <p>No se pudo cargar el contenido: ${error instanceof Error ? error.message : 'Error desconocido'}</p>
          <button onclick="window.parent.postMessage({type: 'RELOAD_REQUEST'}, '*')"
                  style="padding: 10px 20px; background: #1976d2; color: white; border: none; border-radius: 4px; cursor: pointer;">
            Reintentar
          </button>
        </div>
      `);
      setDirectLoading(false);
    }
  };

  // Procesar contenido HTML para corregir rutas
  const processHtmlContent = (html: string, originalUrl: string): string => {
    try {
      const urlObj = new URL(originalUrl);
      const baseUrl = `${urlObj.protocol}//${urlObj.host}`;

      console.log('üîß Procesando HTML para corregir rutas con base:', baseUrl);

      // Funci√≥n para determinar si una ruta necesita ser proxificada
      const needsProxy = (path: string): boolean => {
        const extensions = ['.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.woff', '.woff2', '.ttf', '.eot', '.ico'];
        return extensions.some(ext => path.toLowerCase().includes(ext));
      };

      // Funci√≥n para crear URL del proxy con fallback
      const createProxyUrl = (path: string): string => {
        // Si ya es una URL completa, usarla directamente
        if (path.startsWith('http://') || path.startsWith('https://')) {
          return `http://localhost:3001/api/mandatos-resource?url=${encodeURIComponent(path)}`;
        }
        // Si empieza con /, agregar el dominio base
        if (path.startsWith('/')) {
          return `http://localhost:3001/api/mandatos-resource?url=${encodeURIComponent(baseUrl + path)}`;
        }
        // Si es relativa, agregar el dominio base
        return `http://localhost:3001/api/mandatos-resource?url=${encodeURIComponent(baseUrl + '/' + path)}`;
      };


      // Crear estilos CSS inline para reemplazar recursos faltantes
      const inlineStyles = `
        <style>
          /* Estilos b√°sicos para el formulario */
          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
          .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          h1, h2, h3 { color: #333; margin-bottom: 15px; }
          .form-group { margin-bottom: 15px; }
          label { display: block; margin-bottom: 5px; font-weight: bold; color: #555; }
          input, select, textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-size: 14px; }
          button, .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; }
          button:hover, .btn:hover { background: #0056b3; }
          .btn-success { background: #28a745; }
          .btn-success:hover { background: #1e7e34; }
          .btn-danger { background: #dc3545; }
          .btn-danger:hover { background: #c82333; }
          .btn-warning { background: #ffc107; color: #212529; }
          .btn-warning:hover { background: #e0a800; }
          .table { width: 100%; border-collapse: collapse; margin-top: 20px; }
          .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }
          .table th { background-color: #f8f9fa; font-weight: bold; }
          .alert { padding: 15px; margin-bottom: 20px; border: 1px solid transparent; border-radius: 4px; }
          .alert-danger { color: #721c24; background-color: #f8d7da; border-color: #f5c6cb; }
          .alert-success { color: #155724; background-color: #d4edda; border-color: #c3e6cb; }
          .alert-info { color: #0c5460; background-color: #d1ecf1; border-color: #bee5eb; }
          .loading { text-align: center; padding: 20px; color: #666; }
          .error { color: #dc3545; font-size: 12px; margin-top: 5px; }
          /* Iconos b√°sicos usando Unicode */
          .icon-add::before { content: "+"; font-weight: bold; }
          .icon-edit::before { content: "‚úè"; }
          .icon-delete::before { content: "üóë"; }
          .icon-refresh::before { content: "üîÑ"; }
        </style>
      `;

      // Corregir rutas relativas y absolutas
      let processedHtml = html
        // Eliminar referencias a recursos problem√°ticos
        .replace(/<link[^>]*href="[^"]*glyphicons[^"]*"[^>]*>/gi, '')
        .replace(/<link[^>]*href="[^"]*bootstrap[^"]*"[^>]*>/gi, '')
        .replace(/<link[^>]*href="[^"]*\.css"[^>]*>/gi, '')
        .replace(/<script[^>]*src="[^"]*\.js"[^>]*><\/script>/gi, '')
        // Corregir href con rutas que empiezan con /
        .replace(/href="\/([^"]*)"/g, (match, path) => {
          if (needsProxy(path) && !path.includes('glyphicons') && !path.includes('bootstrap')) {
            const proxyUrl = createProxyUrl('/' + path);
            console.log('üîß Proxificando href:', path, '->', proxyUrl);
            return `href="${proxyUrl}"`;
          }
          return match;
        })
        // Corregir src con rutas que empiezan con /
        .replace(/src="\/([^"]*)"/g, (match, path) => {
          if (needsProxy(path) && !path.includes('glyphicons') && !path.includes('bootstrap')) {
            const proxyUrl = createProxyUrl('/' + path);
            console.log('üîß Proxificando src:', path, '->', proxyUrl);
            return `src="${proxyUrl}"`;
          }
          return match;
        })
        // Corregir url() en CSS con rutas que empiezan con /
        .replace(/url\(\/([^)]*)\)/g, (match, path) => {
          if (needsProxy(path) && !path.includes('glyphicons') && !path.includes('bootstrap')) {
            const proxyUrl = createProxyUrl('/' + path);
            console.log('üîß Proxificando url():', path, '->', proxyUrl);
            return `url("${proxyUrl}")`;
          }
          return match;
        })
        // Corregir URLs completas de mandatos.consalud.des
        .replace(/href="(http:\/\/mandatos\.consalud\.des\/[^"]*)"/g, (_, url) => {
          if (!url.includes('glyphicons') && !url.includes('bootstrap')) {
            const proxyUrl = createProxyUrl(url);
            console.log('üîß Proxificando href completo:', url, '->', proxyUrl);
            return `href="${proxyUrl}"`;
          }
          return `href="#"`;
        })
        .replace(/src="(http:\/\/mandatos\.consalud\.des\/[^"]*)"/g, (_, url) => {
          if (!url.includes('glyphicons') && !url.includes('bootstrap')) {
            const proxyUrl = createProxyUrl(url);
            console.log('üîß Proxificando src completo:', url, '->', proxyUrl);
            return `src="${proxyUrl}"`;
          }
          return `src="#"`;
        })
        // Eliminar referencias a www.consalud.cl
        .replace(/href="(https:\/\/www\.consalud\.cl\/[^"]*)"/g, 'href="#"')
        .replace(/src="(https:\/\/www\.consalud\.cl\/[^"]*)"/g, 'src="#"')
        // Corregir llamadas AJAX
        .replace(/ManagerfrmMandatos\.ashx\?MethodName=([^'"]*)/g, (_, methodName) => {
          const proxyUrl = `http://localhost:3001/api/mandatos-ajax/${methodName}`;
          console.log('üîß Proxificando AJAX:', methodName, '->', proxyUrl);
          return proxyUrl;
        })
        .replace(/http:\/\/mandatos\.consalud\.des\/Middleware\/ManagerfrmMandatos\.ashx\?MethodName=([^'"]*)/g, (_, methodName) => {
          const proxyUrl = `http://localhost:3001/api/mandatos-ajax/${methodName}`;
          console.log('üîß Proxificando AJAX completo:', methodName, '->', proxyUrl);
          return proxyUrl;
        });

      // Inyectar script para interceptar AJAX y recursos
      const ajaxInterceptorScript = `
        <script>
          console.log('üîß Inyectando interceptor AJAX y recursos en ventana directa...');

          // Funci√≥n para redirigir URLs al proxy
          function redirectToProxy(url) {
            if (!url) return url;

            // Si ya es del proxy, no redirigir
            if (url.includes('localhost:3001')) return url;

            // Si es una llamada AJAX, redirigir al endpoint AJAX
            if (url.includes('ManagerfrmMandatos.ashx')) {
              const urlObj = new URL(url, window.location.href);
              const methodName = urlObj.searchParams.get('MethodName');
              if (methodName) {
                return 'http://localhost:3001/api/mandatos-ajax/' + methodName;
              }
            }

            // Si es un recurso est√°tico, redirigir al proxy de recursos
            const extensions = ['.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.woff', '.woff2', '.ttf', '.eot', '.ico'];
            if (extensions.some(ext => url.toLowerCase().includes(ext))) {
              return 'http://localhost:3001/api/mandatos-resource?url=' + encodeURIComponent(url);
            }

            return url;
          }

          // Interceptar XMLHttpRequest
          const originalXHROpen = XMLHttpRequest.prototype.open;
          const originalXHRSend = XMLHttpRequest.prototype.send;

          XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
            console.log('üîÑ Interceptando XHR:', method, url);

            const redirectedUrl = redirectToProxy(url);
            if (redirectedUrl !== url) {
              console.log('üîÑ Redirigiendo XHR:', url, '->', redirectedUrl);
              url = redirectedUrl;
            }

            return originalXHROpen.call(this, method, url, async, user, password);
          };

          XMLHttpRequest.prototype.send = function(data) {
            console.log('üîÑ Enviando XHR con datos:', data);
            return originalXHRSend.call(this, data);
          };

          // Interceptar fetch
          const originalFetch = window.fetch;
          window.fetch = function(url, options) {
            console.log('üîÑ Interceptando fetch:', url);

            const redirectedUrl = redirectToProxy(url);
            if (redirectedUrl !== url) {
              console.log('üîÑ Redirigiendo fetch:', url, '->', redirectedUrl);
              url = redirectedUrl;
            }

            return originalFetch.call(this, url, options);
          };

          // Interceptar creaci√≥n de elementos para corregir src y href
          const originalCreateElement = document.createElement;
          document.createElement = function(tagName) {
            const element = originalCreateElement.call(this, tagName);

            if (tagName.toLowerCase() === 'link' || tagName.toLowerCase() === 'script' || tagName.toLowerCase() === 'img') {
              const originalSetAttribute = element.setAttribute;
              element.setAttribute = function(name, value) {
                if ((name === 'href' || name === 'src') && value) {
                  const redirectedValue = redirectToProxy(value);
                  if (redirectedValue !== value) {
                    console.log('üîÑ Redirigiendo atributo', name, ':', value, '->', redirectedValue);
                    value = redirectedValue;
                  }
                }
                return originalSetAttribute.call(this, name, value);
              };
            }

            return element;
          };

          // Funci√≥n para cargar datos autom√°ticamente
          function loadFormData() {
            console.log('üîÑ Iniciando carga autom√°tica de datos del formulario...');
            console.log('üîÑ Timestamp:', new Date().toISOString());
            console.log('üîÑ Estado del DOM:', document.readyState);
            console.log('üîÑ Elementos del formulario encontrados:', {
              bancos: document.querySelectorAll('select[name*="banco"], select[id*="banco"]').length,
              beneficiarios: document.querySelectorAll('select[name*="beneficiario"], select[id*="beneficiario"]').length,
              totalSelects: document.querySelectorAll('select').length
            });

            // Depurar todos los elementos del formulario
            const allSelects = document.querySelectorAll('select');
            console.log('üîç Todos los selects encontrados:', allSelects.length);
            allSelects.forEach((select, index) => {
              console.log(\`üîç Select \${index}:\`, {
                name: select.name,
                id: select.id,
                className: select.className,
                options: select.options.length
              });
            });

            // Buscar elementos por texto
            const elementsWithText = Array.from(document.querySelectorAll('*')).filter(el =>
              el.textContent && (
                el.textContent.includes('Banco') ||
                el.textContent.includes('Beneficiario') ||
                el.textContent.includes('Cuenta')
              )
            );
            console.log('üîç Elementos con texto relevante:', elementsWithText.length);
            elementsWithText.forEach((el, index) => {
              console.log(\`üîç Elemento \${index}:\`, {
                tagName: el.tagName,
                textContent: el.textContent.substring(0, 50),
                name: el.name,
                id: el.id
              });
            });

            // Funci√≥n para hacer llamada AJAX con retry
            function makeAjaxCall(methodName, callback, retries = 3) {
              console.log('üîÑ Haciendo llamada AJAX para', methodName, '(intento', 4 - retries, 'de 3)');

              const xhr = new XMLHttpRequest();
              xhr.open('GET', 'http://localhost:3001/api/mandatos-ajax/' + methodName, true);
              xhr.setRequestHeader('Accept', 'application/json, text/javascript, */*; q=0.01');
              xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

              xhr.onreadystatechange = function() {
                console.log('üîÑ Estado XHR para', methodName, ':', xhr.readyState, 'Status:', xhr.status);

                if (xhr.readyState === 4) {
                  if (xhr.status === 200) {
                    console.log('‚úÖ Datos cargados para', methodName, ':', xhr.responseText.substring(0, 200) + '...');
                    if (callback) callback(xhr.responseText);
                  } else if (xhr.status === 0 && retries > 0) {
                    // Timeout o error de red, reintentar
                    console.log('‚ö†Ô∏è Error de red para', methodName, ', reintentando...');
                    setTimeout(() => makeAjaxCall(methodName, callback, retries - 1), 1000);
                  } else {
                    console.error('‚ùå Error cargando', methodName, ':', xhr.status, xhr.statusText);
                    if (callback) callback(null);
                  }
                }
              };

              xhr.onerror = function() {
                console.error('‚ùå Error de red para', methodName);
                if (retries > 0) {
                  console.log('üîÑ Reintentando en 1 segundo...');
                  setTimeout(() => makeAjaxCall(methodName, callback, retries - 1), 1000);
                } else {
                  if (callback) callback(null);
                }
              };

              xhr.ontimeout = function() {
                console.error('‚è∞ Timeout para', methodName);
                if (retries > 0) {
                  console.log('üîÑ Reintentando en 1 segundo...');
                  setTimeout(() => makeAjaxCall(methodName, callback, retries - 1), 1000);
                } else {
                  if (callback) callback(null);
                }
              };

              xhr.timeout = 10000; // 10 segundos timeout
              xhr.send();
            }

            // Funci√≥n para procesar datos de bancos
            function processBancosData(response) {
              if (!response) {
                console.log('‚ö†Ô∏è No hay datos de bancos, creando datos de prueba');
                // Crear datos de prueba
                const testBancos = [
                  { CODIGO: '001', NOMBRE: 'Banco de Chile' },
                  { CODIGO: '002', NOMBRE: 'Banco Santander' },
                  { CODIGO: '003', NOMBRE: 'Banco BCI' },
                  { CODIGO: '004', NOMBRE: 'Banco Estado' },
                  { CODIGO: '005', NOMBRE: 'Banco Ita√∫' }
                ];
                fillBancosSelect(testBancos);
                return;
              }

              try {
                let data;
                if (typeof response === 'string') {
                  data = JSON.parse(response);
                } else {
                  data = response;
                }

                console.log('üìä Datos de bancos recibidos:', data);

                if (Array.isArray(data) && data.length > 0) {
                  fillBancosSelect(data);
                } else {
                  console.log('‚ö†Ô∏è Datos de bancos vac√≠os, usando datos de prueba');
                  processBancosData(null);
                }
              } catch (error) {
                console.error('‚ùå Error procesando datos de bancos:', error);
                processBancosData(null);
              }
            }

            // Funci√≥n para llenar select de bancos
            function fillBancosSelect(data) {
              const bancoSelect = document.querySelector('select[name*="banco"], select[id*="banco"], select[name*="Banco"], select[id*="Banco"]');
              if (bancoSelect) {
                bancoSelect.innerHTML = '<option value="">Seleccione un banco</option>';
                data.forEach(banco => {
                  const option = document.createElement('option');
                  option.value = banco.CODIGO || banco.id || banco.value || banco.codigo;
                  option.textContent = banco.NOMBRE || banco.nombre || banco.text || banco.name;
                  bancoSelect.appendChild(option);
                });
                console.log('‚úÖ Select de bancos llenado con', data.length, 'opciones');
              } else {
                console.log('‚ö†Ô∏è No se encontr√≥ select de bancos');
              }
            }

            // Funci√≥n para procesar datos de beneficiarios
            function processBeneficiariosData(response) {
              if (!response) {
                console.log('‚ö†Ô∏è No hay datos de beneficiarios, creando datos de prueba');
                const testBeneficiarios = [
                  { CODIGO: '1', NOMBRE: 'Juan P√©rez' },
                  { CODIGO: '2', NOMBRE: 'Mar√≠a Gonz√°lez' },
                  { CODIGO: '3', NOMBRE: 'Carlos L√≥pez' }
                ];
                fillBeneficiariosSelect(testBeneficiarios);
                return;
              }

              try {
                let data;
                if (typeof response === 'string') {
                  data = JSON.parse(response);
                } else {
                  data = response;
                }

                console.log('üìä Datos de beneficiarios recibidos:', data);

                if (Array.isArray(data) && data.length > 0) {
                  fillBeneficiariosSelect(data);
                } else {
                  console.log('‚ö†Ô∏è Datos de beneficiarios vac√≠os, usando datos de prueba');
                  processBeneficiariosData(null);
                }
              } catch (error) {
                console.error('‚ùå Error procesando datos de beneficiarios:', error);
                processBeneficiariosData(null);
              }
            }

            // Funci√≥n para llenar select de beneficiarios
            function fillBeneficiariosSelect(data) {
              const beneficiarioSelect = document.querySelector('select[name*="beneficiario"], select[id*="beneficiario"], select[name*="Beneficiario"], select[id*="Beneficiario"], input[name*="beneficiario"]');
              if (beneficiarioSelect) {
                if (beneficiarioSelect.tagName === 'SELECT') {
                  beneficiarioSelect.innerHTML = '<option value="">Seleccione un beneficiario</option>';
                  data.forEach(beneficiario => {
                    const option = document.createElement('option');
                    option.value = beneficiario.CODIGO || beneficiario.id || beneficiario.value || beneficiario.codigo;
                    option.textContent = beneficiario.NOMBRE || beneficiario.nombre || beneficiario.text || beneficiario.name;
                    beneficiarioSelect.appendChild(option);
                  });
                  console.log('‚úÖ Select de beneficiarios llenado con', data.length, 'opciones');
                } else {
                  console.log('‚ö†Ô∏è Elemento beneficiario no es un select');
                }
              } else {
                console.log('‚ö†Ô∏è No se encontr√≥ select de beneficiarios');
              }
            }

            // Cargar bancos
            makeAjaxCall('LLENABANCOS', processBancosData);

            // Cargar beneficiarios
            makeAjaxCall('LLENADESTINATARIOPAGO', processBeneficiariosData);
          }

          // Ejecutar carga de datos inmediatamente y tambi√©n cuando el DOM est√© listo
          console.log('üîÑ Estado del DOM:', document.readyState);

          // Ejecutar inmediatamente
          setTimeout(loadFormData, 500);

          // Tambi√©n ejecutar cuando el DOM est√© listo
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', loadFormData);
          }

          // Ejecutar despu√©s de un delay adicional para asegurar que todo est√© cargado
          setTimeout(loadFormData, 2000);

          console.log('‚úÖ Interceptor AJAX y recursos inyectado en ventana directa');
        </script>
      `;

      // Inyectar estilos y script
      const combinedScript = inlineStyles + ajaxInterceptorScript;

      if (processedHtml.includes('</head>')) {
        processedHtml = processedHtml.replace('</head>', combinedScript + '</head>');
      } else if (processedHtml.includes('<body')) {
        processedHtml = processedHtml.replace('<body', combinedScript + '<body');
      } else {
        processedHtml = combinedScript + processedHtml;
      }

      return processedHtml;

    } catch (error) {
      console.error('‚ùå Error procesando HTML:', error);
      return html;
    }
  };

  // Manejar el cierre del modal
  const handleClose = () => {
    console.log('üîí Cerrando modal de iframe de mandatos');
    setProxyActivated(false);
    setHasResourceErrors(false);
    setProxyCountdown(0);
    onClose();
  };

  // Manejar clic en overlay
  const handleOverlayClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      handleClose();
    }
  };

  if (!isOpen) return null;

  return (
    <div className="mandatos-iframe-modal-overlay" onClick={handleOverlayClick}>
      <div className="mandatos-iframe-modal-container">
        {/* Header del modal */}
        <div className="mandatos-iframe-modal-header">
          <div className="mandatos-iframe-modal-title">
            <h2>Actualizar Mandatos</h2>
            {transactionId && (
              <span className="transaction-id">
                ID: {transactionId.substring(0, 8)}...
              </span>
            )}
          </div>
          <div className="mandatos-iframe-modal-actions">
            {iframeUrl && (
              <>
                <button
                  className="button is-small is-warning mr-2"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleReloadIframe();
                  }}
                  title="Recargar formulario"
                  disabled={iframeLoading}
                >
                  <i className="fas fa-sync-alt"></i>
                </button>
                {hasResourceErrors && (
                  <>
                    <button
                      className="button is-small is-danger mr-2"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleReloadWithCorsFix();
                      }}
                      title="Intentar soluci√≥n CORS"
                      disabled={iframeLoading}
                    >
                      <i className="fas fa-tools"></i>
                    </button>
                    <button
                      className="button is-small is-success mr-2"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleUseProxy();
                      }}
                      title={proxyActivated ? "Proxy ya activado" : "Usar proxy para solucionar CORS"}
                      disabled={iframeLoading || proxyActivated}
                    >
                      <i className="fas fa-server"></i>
                      {proxyActivated && <span className="ml-1">‚úì</span>}
                    </button>
                  </>
                )}
                <button
                  className="button is-small is-info mr-2"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleOpenInNewTab();
                  }}
                  title="Abrir en nueva pesta√±a"
                >
                  <i className="fas fa-external-link-alt"></i>
                </button>
                <button
                  className="button is-small is-warning mr-2"
                  onClick={async (e) => {
                    e.stopPropagation();
                    const newValue = !useInternalWindow;
                    setUseInternalWindow(newValue);

                    // Si se activa la ventana interna, activar proxy autom√°ticamente
                    if (newValue && !proxyActivated) {
                      console.log('üîÑ Activando proxy para ventana interna...');
                      await handleUseProxy();
                    }
                  }}
                  title={useInternalWindow ? "Usar iframe normal" : "Usar ventana interna (sin CORS)"}
                >
                  <i className="fas fa-window-restore"></i>
                </button>
                <button
                  className="button is-small is-success mr-2"
                  onClick={async (e) => {
                    e.stopPropagation();
                    const newValue = !useTabSimulation;
                    setUseTabSimulation(newValue);

                    // Si se activa la simulaci√≥n de pesta√±a, activar proxy autom√°ticamente
                    if (newValue && !proxyActivated) {
                      console.log('üîÑ Activando proxy para simulaci√≥n de pesta√±a...');
                      await handleUseProxy();
                    }
                  }}
                  title={useTabSimulation ? "Usar iframe normal" : "Simular pesta√±a del navegador (sin CORS)"}
                >
                  <i className="fas fa-window-maximize"></i>
                </button>
                <button
                  className="button is-small is-primary mr-2"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleOpenRealWindow();
                  }}
                  title="Abrir en ventana real (sin CORS, sin iframe)"
                >
                  <i className="fas fa-external-link-square-alt"></i>
                </button>
                <button
                  className="button is-small is-info mr-2"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleLoadDirectContent();
                  }}
                  title="Cargar contenido directamente (sin iframe, sin CORS)"
                  disabled={directLoading}
                >
                  <i className="fas fa-window-restore"></i>
                  {directLoading && <span className="ml-1">‚è≥</span>}
                </button>
                <button
                  className="button is-small is-success mr-2"
                  onClick={(e) => {
                    e.stopPropagation();
                    handleOpenTabSimulation();
                  }}
                  title="Simular pesta√±a del navegador con URL encriptada"
                  disabled={tabLoading}
                >
                  <i className="fas fa-tab"></i>
                  {tabLoading && <span className="ml-1">‚è≥</span>}
                </button>
              </>
            )}
            <button
              className="mandatos-iframe-modal-close"
              onClick={(e) => {
                e.stopPropagation();
                handleClose();
              }}
              aria-label="Cerrar modal"
            >
              √ó
            </button>
          </div>
        </div>

        {/* Contenido del modal */}
        <div className="mandatos-iframe-modal-body">
          {loading ? (
            <div className="mandatos-iframe-loading">
              <div className="loader-container">
                <div className="loader"></div>
              </div>
              <p>Cargando formulario de mandatos...</p>
            </div>
          ) : error ? (
            <div className="mandatos-iframe-error">
              <div className="notification is-danger">
                <h3>Error al cargar el formulario</h3>
                <p>{error}</p>
                <button className="button is-primary" onClick={(e) => {
                  e.stopPropagation();
                  handleClose();
                }}>
                  Cerrar
                </button>
              </div>
            </div>
          ) : useRealWindow ? (
            <div className="mandatos-real-window-info">
              <div className="notification is-info">
                <h3>‚úÖ Ventana Real Abierta</h3>
                <p>El formulario de mandatos se ha abierto en una nueva ventana del navegador.</p>
                <p><strong>Ventajas de esta opci√≥n:</strong></p>
                <ul style={{ marginLeft: '20px', marginTop: '10px' }}>
                  <li>‚úÖ Sin restricciones de CORS</li>
                  <li>‚úÖ Carga completa de recursos</li>
                  <li>‚úÖ Funcionalidad completa del formulario</li>
                  <li>‚úÖ Datos se cargan correctamente</li>
                </ul>
                <div className="mt-4">
                  <button
                    className="button is-primary mr-2"
                    onClick={(e) => {
                      e.stopPropagation();
                      if (popupWindow && !popupWindow.closed) {
                        popupWindow.focus();
                      }
                    }}
                  >
                    <i className="fas fa-external-link-alt mr-1"></i>
                    Ir a la Ventana
                  </button>
                  <button
                    className="button is-secondary"
                    onClick={(e) => {
                      e.stopPropagation();
                      handleCloseRealWindow();
                      handleClose();
                    }}
                  >
                    <i className="fas fa-times mr-1"></i>
                    Cerrar Todo
                  </button>
                </div>
              </div>
            </div>
          ) : useDirectWindow ? (
            <div className="mandatos-direct-window-container" style={{
              width: '100%',
              height: '100%',
              border: '2px solid #1976d2',
              borderRadius: '8px',
              overflow: 'hidden',
              position: 'relative',
              backgroundColor: '#f5f5f5'
            }}>
              <div className="direct-window-header" style={{
                backgroundColor: '#1976d2',
                color: 'white',
                padding: '8px 12px',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                fontSize: '14px'
              }}>
                <span>üìã Formulario de Mandatos - Carga Directa (Sin CORS)</span>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setUseDirectWindow(false);
                    setDirectContent('');
                  }}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: 'white',
                    cursor: 'pointer',
                    fontSize: '16px'
                  }}
                  title="Cerrar ventana directa"
                >
                  √ó
                </button>
              </div>
              <div className="direct-window-content" style={{
                height: 'calc(100% - 40px)',
                position: 'relative',
                backgroundColor: 'white',
                overflow: 'auto'
              }}>
                {directLoading ? (
                  <div style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: 'rgba(255, 255, 255, 0.9)',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    zIndex: 10
                  }}>
                    <div className="loader-container">
                      <div className="loader"></div>
                    </div>
                    <p>Cargando formulario directamente...</p>
                  </div>
                ) : directContent ? (
                  <div
                    dangerouslySetInnerHTML={{ __html: directContent }}
                    style={{
                      width: '100%',
                      height: '100%',
                      overflow: 'auto'
                    }}
                  />
                ) : (
                  <div style={{
                    padding: '20px',
                    textAlign: 'center',
                    color: '#666'
                  }}>
                    <h3>Contenido no disponible</h3>
                    <p>No se ha cargado contenido a√∫n.</p>
                    <button
                      className="button is-primary"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleLoadDirectContent();
                      }}
                    >
                      Cargar Contenido
                    </button>
                  </div>
                )}
              </div>
            </div>
          ) : useTabSimulation ? (
            <div className="browser-tab-simulation" style={{
              width: '100%',
              height: '100%',
              backgroundColor: '#f5f5f5',
              border: '1px solid #ddd',
              borderRadius: '8px',
              overflow: 'hidden',
              position: 'relative',
              display: 'flex',
              flexDirection: 'column'
            }}>
              <div dangerouslySetInnerHTML={{ __html: tabContent }} />
            </div>
          ) : iframeUrl ? (
            <div className="mandatos-iframe-container">
              {useTabSimulation ? (
                <div className="browser-tab-simulation" style={{
                  width: '100%',
                  height: '100%',
                  backgroundColor: '#f5f5f5',
                  border: '1px solid #ddd',
                  borderRadius: '8px',
                  overflow: 'hidden',
                  position: 'relative',
                  display: 'flex',
                  flexDirection: 'column'
                }}>
                  {/* Barra de pesta√±a del navegador */}
                  <div className="browser-tab-bar" style={{
                    backgroundColor: '#f1f1f1',
                    borderBottom: '1px solid #ddd',
                    padding: '8px 12px',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'space-between',
                    fontSize: '14px',
                    minHeight: '40px'
                  }}>
                    <div className="tab-controls" style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <div className="tab-buttons" style={{ display: 'flex', gap: '4px' }}>
                        <div style={{
                          width: '12px',
                          height: '12px',
                          borderRadius: '50%',
                          backgroundColor: '#ff5f57',
                          cursor: 'pointer'
                        }} title="Cerrar pesta√±a" onClick={(e) => {
                          e.stopPropagation();
                          setUseTabSimulation(false);
                        }}></div>
                        <div style={{
                          width: '12px',
                          height: '12px',
                          borderRadius: '50%',
                          backgroundColor: '#ffbd2e',
                          cursor: 'pointer'
                        }} title="Minimizar"></div>
                        <div style={{
                          width: '12px',
                          height: '12px',
                          borderRadius: '50%',
                          backgroundColor: '#28ca42',
                          cursor: 'pointer'
                        }} title="Maximizar"></div>
                      </div>
                      <div className="tab-title" style={{
                        marginLeft: '12px',
                        fontWeight: '500',
                        color: '#333'
                      }}>
                        üìã Formulario de Mandatos
                      </div>
                    </div>
                    <div className="tab-actions" style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <div className="refresh-button" style={{
                        width: '20px',
                        height: '20px',
                        borderRadius: '50%',
                        backgroundColor: '#e0e0e0',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }} title="Recargar" onClick={(e) => {
                        e.stopPropagation();
                        handleReloadIframe();
                      }}>
                        üîÑ
                      </div>
                    </div>
                  </div>

                  {/* Barra de direcciones */}
                  <div className="address-bar" style={{
                    backgroundColor: '#fff',
                    borderBottom: '1px solid #ddd',
                    padding: '8px 12px',
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    fontSize: '13px'
                  }}>
                    <div style={{
                      width: '16px',
                      height: '16px',
                      backgroundColor: '#4CAF50',
                      borderRadius: '2px',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      color: 'white',
                      fontSize: '10px',
                      fontWeight: 'bold'
                    }}>
                      üîí
                    </div>
                    <div style={{
                      flex: 1,
                      backgroundColor: '#f8f8f8',
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      padding: '4px 8px',
                      fontFamily: 'monospace',
                      fontSize: '12px',
                      color: '#666'
                    }}>
                      {iframeUrl}
                    </div>
                    <div style={{
                      padding: '4px 8px',
                      backgroundColor: '#4CAF50',
                      color: 'white',
                      borderRadius: '4px',
                      fontSize: '11px',
                      fontWeight: 'bold'
                    }}>
                      SEGURO
                    </div>
                  </div>

                  {/* Contenido del iframe */}
                  <div className="browser-content" style={{
                    flex: 1,
                    position: 'relative',
                    backgroundColor: '#fff'
                  }}>
                    {iframeLoading && (
                      <div className="mandatos-iframe-loading-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="loader-container">
                          <div className="loader"></div>
                        </div>
                        <p>Cargando formulario de mandatos...</p>
                      </div>
                    )}
                    {iframeError ? (
                      <div className="mandatos-iframe-error-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.95)',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="notification is-danger">
                          <h3>Error al cargar el formulario</h3>
                          <p>{iframeError}</p>
                          <div className="mt-3">
                            <button
                              className="button is-primary mr-2"
                              onClick={async (e) => {
                                e.stopPropagation();
                                setIframeError(null);
                                setIframeLoading(true);
                                console.log('üîÑ Reintentando con verificaci√≥n de proxy...');

                                // Verificar proxy nuevamente
                                const proxyAvailable = await checkProxyAvailability();
                                if (proxyAvailable) {
                                  console.log('‚úÖ Proxy disponible, activando...');
                                  handleUseProxy();
                                } else {
                                  console.log('‚ùå Proxy a√∫n no disponible');
                                  setIframeError('El servidor proxy sigue no disponible. Por favor, inicie el servidor proxy ejecutando: node src/server/proxy.js');
                                  setIframeLoading(false);
                                }
                              }}
                            >
                              Reintentar
                            </button>
                            <button className="button is-secondary" onClick={(e) => {
                              e.stopPropagation();
                              handleClose();
                            }}>
                              Cerrar
                            </button>
                          </div>
                        </div>
                      </div>
                    ) : null}
                    {iframeUrl && iframeUrl.startsWith('http') ? (
                      <iframe
                        ref={iframeRef}
                        src={getIframeUrl()}
                        title="Formulario de Mandatos"
                        className="mandatos-iframe"
                        onLoad={handleIframeLoad}
                        onError={handleIframeError}
                        sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-top-navigation allow-downloads allow-modals allow-presentation allow-orientation-lock allow-pointer-lock"
                        allow="fullscreen; camera; microphone; geolocation; payment; usb; autoplay; encrypted-media; clipboard-read; clipboard-write"
                        referrerPolicy="no-referrer"
                        loading="eager"
                        style={{
                          display: iframeLoading ? 'none' : 'block',
                          width: '100%',
                          height: '100%',
                          border: 'none'
                        }}
                        onLoadStart={() => {
                          console.log('üöÄ Iframe comenzando a cargar con src:', iframeRef.current?.src);
                          console.log('üöÄ URL esperada:', iframeUrl);
                        }}
                      />
                    ) : (
                      <div className="mandatos-iframe-error-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.95)',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="notification is-warning">
                          <h3>URL no disponible</h3>
                          <p>La URL del formulario no est√° disponible o es inv√°lida.</p>
                          <p><strong>URL actual:</strong> {iframeUrl || 'null'}</p>
                          <button className="button is-primary" onClick={handleClose}>
                            Cerrar
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ) : useInternalWindow ? (
                <div className="internal-window-container" style={{
                  width: '100%',
                  height: '100%',
                  border: '2px solid #3273dc',
                  borderRadius: '8px',
                  overflow: 'hidden',
                  position: 'relative',
                  backgroundColor: '#f5f5f5'
                }}>
                  <div className="internal-window-header" style={{
                    backgroundColor: '#3273dc',
                    color: 'white',
                    padding: '8px 12px',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center',
                    fontSize: '14px'
                  }}>
                    <span>üìã Formulario de Mandatos - Ventana Interna</span>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setUseInternalWindow(false);
                      }}
                      style={{
                        background: 'none',
                        border: 'none',
                        color: 'white',
                        cursor: 'pointer',
                        fontSize: '16px'
                      }}
                      title="Cerrar ventana interna"
                    >
                      √ó
                    </button>
                  </div>
                  <div className="internal-window-content" style={{
                    height: 'calc(100% - 40px)',
                    position: 'relative'
                  }}>
                    {iframeLoading && (
                      <div className="mandatos-iframe-loading-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                        display: 'flex',
                        flexDirection: 'column',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="loader-container">
                          <div className="loader"></div>
                        </div>
                        <p>Cargando formulario de mandatos...</p>
                      </div>
                    )}
                    {iframeError ? (
                      <div className="mandatos-iframe-error-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.95)',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="notification is-danger">
                          <h3>Error al cargar el formulario</h3>
                          <p>{iframeError}</p>
                          <div className="mt-3">
                            <button
                              className="button is-primary mr-2"
                              onClick={async (e) => {
                                e.stopPropagation();
                                setIframeError(null);
                                setIframeLoading(true);
                                console.log('üîÑ Reintentando con verificaci√≥n de proxy...');

                                // Verificar proxy nuevamente
                                const proxyAvailable = await checkProxyAvailability();
                                if (proxyAvailable) {
                                  console.log('‚úÖ Proxy disponible, activando...');
                                  handleUseProxy();
                                } else {
                                  console.log('‚ùå Proxy a√∫n no disponible');
                                  setIframeError('El servidor proxy sigue no disponible. Por favor, inicie el servidor proxy ejecutando: node src/server/proxy.js');
                                  setIframeLoading(false);
                                }
                              }}
                            >
                              Reintentar
                            </button>
                            <button className="button is-secondary" onClick={(e) => {
                              e.stopPropagation();
                              handleClose();
                            }}>
                              Cerrar
                            </button>
                          </div>
                        </div>
                      </div>
                    ) : null}
                    {iframeUrl && iframeUrl.startsWith('http') ? (
                      <iframe
                        ref={iframeRef}
                        src={getIframeUrl()}
                        title="Formulario de Mandatos"
                        className="mandatos-iframe"
                        onLoad={handleIframeLoad}
                        onError={handleIframeError}
                        sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-top-navigation allow-downloads allow-modals allow-presentation allow-orientation-lock allow-pointer-lock"
                        allow="fullscreen; camera; microphone; geolocation; payment; usb; autoplay; encrypted-media; clipboard-read; clipboard-write"
                        referrerPolicy="no-referrer"
                        loading="eager"
                        style={{
                          display: iframeLoading ? 'none' : 'block',
                          width: '100%',
                          height: '100%',
                          border: 'none'
                        }}
                        onLoadStart={() => {
                          console.log('üöÄ Iframe comenzando a cargar con src:', iframeRef.current?.src);
                          console.log('üöÄ URL esperada:', iframeUrl);
                        }}
                      />
                    ) : (
                      <div className="mandatos-iframe-error-overlay" style={{
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        right: 0,
                        bottom: 0,
                        backgroundColor: 'rgba(255, 255, 255, 0.95)',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'center',
                        zIndex: 10
                      }}>
                        <div className="notification is-warning">
                          <h3>URL no disponible</h3>
                          <p>La URL del formulario no est√° disponible o es inv√°lida.</p>
                          <p><strong>URL actual:</strong> {iframeUrl || 'null'}</p>
                          <button className="button is-primary" onClick={handleClose}>
                            Cerrar
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              ) : (
                <>
                  {iframeLoading && (
                    <div className="mandatos-iframe-loading-overlay">
                      <div className="loader-container">
                        <div className="loader"></div>
                      </div>
                      <p>Cargando formulario de mandatos...</p>
                    </div>
                  )}
                  {iframeError ? (
                    <div className="mandatos-iframe-error-overlay">
                      <div className="notification is-danger">
                        <h3>Error al cargar el formulario</h3>
                        <p>{iframeError}</p>
                        <div className="mt-3">
                            <button
                              className="button is-primary mr-2"
                              onClick={async (e) => {
                                e.stopPropagation();
                                setIframeError(null);
                                setIframeLoading(true);
                                console.log('üîÑ Reintentando con verificaci√≥n de proxy...');

                                // Verificar proxy nuevamente
                                const proxyAvailable = await checkProxyAvailability();
                                if (proxyAvailable) {
                                  console.log('‚úÖ Proxy disponible, activando...');
                                  handleUseProxy();
                                } else {
                                  console.log('‚ùå Proxy a√∫n no disponible');
                                  setIframeError('El servidor proxy sigue no disponible. Por favor, inicie el servidor proxy ejecutando: node src/server/proxy.js');
                                  setIframeLoading(false);
                                }
                              }}
                            >
                              Reintentar
                            </button>
                            <button className="button is-secondary" onClick={(e) => {
                              e.stopPropagation();
                              handleClose();
                            }}>
                              Cerrar
                            </button>
                        </div>
                      </div>
                    </div>
                  ) : null}
                  {iframeUrl && iframeUrl.startsWith('http') ? (
                    <iframe
                      ref={iframeRef}
                      src={iframeUrl}
                      title="Formulario de Mandatos"
                      className="mandatos-iframe"
                      onLoad={handleIframeLoad}
                      onError={handleIframeError}
                      sandbox="allow-same-origin allow-scripts allow-forms allow-popups allow-top-navigation allow-downloads allow-modals allow-presentation"
                      allow="fullscreen; camera; microphone; geolocation; payment; usb; autoplay"
                      referrerPolicy="no-referrer"
                      loading="eager"
                      style={{
                        display: iframeLoading ? 'none' : 'block',
                        width: '100%',
                        height: '100%',
                        border: 'none'
                      }}
                      onLoadStart={() => {
                        console.log('üöÄ Iframe comenzando a cargar con src:', iframeRef.current?.src);
                        console.log('üöÄ URL esperada:', iframeUrl);
                      }}
                    />
                  ) : (
                    <div className="mandatos-iframe-error-overlay">
                      <div className="notification is-warning">
                        <h3>URL no disponible</h3>
                        <p>La URL del formulario no est√° disponible o es inv√°lida.</p>
                        <p><strong>URL actual:</strong> {iframeUrl || 'null'}</p>
                        <button className="button is-primary" onClick={handleClose}>
                          Cerrar
                        </button>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>
          ) : (
            <div className="mandatos-iframe-error">
              <div className="notification is-warning">
                <h3>No se pudo generar la URL</h3>
                <p>No se pudo obtener la URL del formulario de mandatos.</p>
                <button className="button is-primary" onClick={(e) => {
                  e.stopPropagation();
                  handleClose();
                }}>
                  Cerrar
                </button>
              </div>
            </div>
          )}
        </div>

        {/* Footer del modal */}
        <div className="mandatos-iframe-modal-footer">
          <div className="mandatos-iframe-modal-instructions">
            <p>
              <i className="fas fa-info-circle"></i>
              Complete la informaci√≥n en el formulario y cierre esta ventana cuando termine.
            </p>
            <p className="is-size-7 mt-1">
              <i className="fas fa-list"></i>
              <strong>Opciones disponibles:</strong>
            </p>
            <ul className="is-size-7 mt-1" style={{ marginLeft: '20px' }}>
              <li><i className="fas fa-tab"></i> <strong>Simular Pesta√±a:</strong> <span className="has-text-success"><strong>NUEVO</strong></span> - Simula pesta√±a con URL encriptada</li>
              <li><i className="fas fa-external-link-square-alt"></i> <strong>Ventana Real:</strong> <span className="has-text-success"><strong>RECOMENDADO</strong></span> - Abre en ventana real sin CORS</li>
              <li><i className="fas fa-window-restore"></i> <strong>Carga Directa:</strong> Carga contenido directamente sin iframe</li>
              <li><i className="fas fa-sync-alt"></i> <strong>Recargar:</strong> Si no ve datos, use el bot√≥n de recarga</li>
            </ul>
            {hasResourceErrors ? (
              <div className="is-size-7 mt-1 has-text-danger">
                <p>
                  <i className="fas fa-exclamation-triangle"></i>
                  <strong>Problema CORS detectado:</strong> El servidor bloquea recursos en iframe.
                </p>
                <p className="mt-1">
                  <i className="fas fa-clock"></i>
                  <strong>Activaci√≥n autom√°tica:</strong> El proxy se activar√° autom√°ticamente en {proxyCountdown} segundos...
                </p>
                <p className="mt-1">
                  <i className="fas fa-tools"></i>
                  O use el bot√≥n de herramientas para intentar soluci√≥n CORS manualmente.
                </p>
                <p className="mt-1">
                  <i className="fas fa-server"></i>
                  <strong>Proxy CORS:</strong> El proxy se activa autom√°ticamente al abrir el modal. Si no funciona, inicie manualmente: node src/server/proxy.js
                </p>
                <p className="mt-1">
                  <i className="fas fa-lightbulb"></i>
                  <strong>Recomendaci√≥n:</strong> Use la opci√≥n <strong>"Ventana Real"</strong> (bot√≥n azul) para evitar completamente los problemas de CORS.
                </p>
              </div>
            ) : (
              <p className="is-size-7 mt-1 has-text-info">
                <i className="fas fa-info-circle"></i>
                Para la mejor experiencia, use la opci√≥n <strong>"Ventana Real"</strong> (bot√≥n azul) que evita completamente los problemas de CORS.
              </p>
            )}
          </div>
          <button
            className="button is-secondary"
            onClick={(e) => {
              e.stopPropagation();
              handleClose();
            }}
          >
            Cerrar
          </button>
        </div>
      </div>
    </div>
  );
};

export default MandatosIframeModal;
